import { isDesktopChrome } from '@terra-dev/browser-check';
import { AccAddress } from '@terra-money/terra.js';
import { BehaviorSubject } from 'rxjs';
import { defaultSelectModal } from './defaultSelectModal';
import { extensionFixer } from './extensionFixer';
import { getTerraChromeExtensions } from './multiChannel';
import { clearSession, getStoredSession, storeSession } from './storage';
import { ChromeExtensionStatus } from './types';
export class ChromeExtensionController {
    constructor(options) {
        this.options = options;
        this._extension = null;
        this.status = () => {
            return this._status.asObservable();
        };
        this.networkInfo = () => {
            return this._networkInfo.asObservable();
        };
        this.terraAddress = () => {
            return this._terraAddress.asObservable();
        };
        this.checkStatus = async () => {
            // do not check if browser isn't a chrome
            if (!this.isDesktopChrome) {
                return;
            }
            if (this.extensionInfos.length === 0) {
                this._status.next(ChromeExtensionStatus.UNAVAILABLE);
                return;
            }
            if (!this._extension) {
                this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                return;
            }
            // get networkInfo from extension
            const infoPayload = await this._extension.info();
            if (infoPayload &&
                this._networkInfo.getValue().chainID !== infoPayload.chainID) {
                this._networkInfo.next(infoPayload);
            }
            if (this.options.enableWalletConnection) {
                //const storageStoredWalletAddress: string | null = getStoredAddress();
                const session = getStoredSession();
                // if the storage has wallet address
                if (session && AccAddress.validate(session.walletAddress)) {
                    this._status.next(ChromeExtensionStatus.WALLET_CONNECTED);
                    const connectResult = await this._extension.connect();
                    // if address of extension is not same with the address of localStorage
                    if (connectResult.address &&
                        AccAddress.validate(connectResult.address)) {
                        storeSession({
                            walletAddress: connectResult.address,
                            identifier: session.identifier,
                        });
                    }
                    if (!!connectResult.address) {
                        if (this._terraAddress.getValue() !== connectResult.address) {
                            this._terraAddress.next(connectResult.address);
                        }
                    }
                    else {
                        clearSession();
                        this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    }
                }
                else {
                    if (session) {
                        clearSession();
                    }
                    this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    this._terraAddress.next(null);
                }
            }
            else {
                this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                this._terraAddress.next(null);
            }
        };
        this.connect = async (identifier) => {
            var _a;
            const extensionInfos = getTerraChromeExtensions();
            if (extensionInfos.length === 0) {
                return false;
            }
            let extensionInfo;
            if (identifier) {
                extensionInfo = extensionInfos.find((item) => item.identifier === identifier);
            }
            else if (extensionInfos.length === 1) {
                extensionInfo = extensionInfos[0];
            }
            else {
                const select = (_a = this.options.selectExtension) !== null && _a !== void 0 ? _a : defaultSelectModal;
                const selection = await select(extensionInfos);
                if (selection) {
                    extensionInfo = selection;
                }
            }
            if (extensionInfo) {
                this._extension = extensionFixer(extensionInfo.identifier);
                const result = await this._extension.connect();
                if (result === null || result === void 0 ? void 0 : result.address) {
                    const walletAddress = result.address;
                    storeSession({
                        identifier: extensionInfo.identifier,
                        walletAddress,
                    });
                    await this.checkStatus();
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        this.disconnect = () => {
            clearSession();
            this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
            this._terraAddress.next(null);
            this._extension = null;
        };
        this.recheckStatus = () => {
            if (this._extension && !this._extension.inTransactionProgress()) {
                this.checkStatus();
            }
        };
        this.post = (data) => {
            if (!this._extension) {
                throw new Error(`There is no connected wallet`);
            }
            return this._extension.post(data);
        };
        this.sign = (data) => {
            if (!this._extension) {
                throw new Error(`There is no connected wallet`);
            }
            return this._extension.sign(data);
        };
        this.isDesktopChrome =
            typeof window !== 'undefined' &&
                isDesktopChrome(options.dangerously__chromeExtensionCompatibleBrowserCheck(navigator.userAgent));
        this._status = new BehaviorSubject(this.isDesktopChrome
            ? ChromeExtensionStatus.INITIALIZING
            : ChromeExtensionStatus.UNAVAILABLE);
        this._networkInfo = new BehaviorSubject(options.defaultNetwork);
        this.extensionInfos = getTerraChromeExtensions();
        if (!this.isDesktopChrome) {
            this._terraAddress = new BehaviorSubject(null);
            return;
        }
        // ---------------------------------------------
        // initialize session
        // ---------------------------------------------
        if (this.extensionInfos.length === 0) {
            this._terraAddress = new BehaviorSubject(null);
            this._status.next(ChromeExtensionStatus.UNAVAILABLE);
            return;
        }
        const session = getStoredSession();
        if (!session ||
            !this.extensionInfos.some((item) => item.identifier === session.identifier)) {
            this._terraAddress = new BehaviorSubject(null);
            this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
            return;
        }
        this._terraAddress = new BehaviorSubject(session.walletAddress);
        this._extension = extensionFixer(session.identifier);
        this.checkStatus();
    }
}
//# sourceMappingURL=data:application/json;base64,