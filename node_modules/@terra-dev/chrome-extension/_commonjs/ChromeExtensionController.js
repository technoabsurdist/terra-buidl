"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChromeExtensionController = void 0;
const browser_check_1 = require("@terra-dev/browser-check");
const terra_js_1 = require("@terra-money/terra.js");
const rxjs_1 = require("rxjs");
const defaultSelectModal_1 = require("./defaultSelectModal");
const extensionFixer_1 = require("./extensionFixer");
const multiChannel_1 = require("./multiChannel");
const storage_1 = require("./storage");
const types_1 = require("./types");
class ChromeExtensionController {
    constructor(options) {
        this.options = options;
        this._extension = null;
        this.status = () => {
            return this._status.asObservable();
        };
        this.networkInfo = () => {
            return this._networkInfo.asObservable();
        };
        this.terraAddress = () => {
            return this._terraAddress.asObservable();
        };
        this.checkStatus = async () => {
            // do not check if browser isn't a chrome
            if (!this.isDesktopChrome) {
                return;
            }
            if (this.extensionInfos.length === 0) {
                this._status.next(types_1.ChromeExtensionStatus.UNAVAILABLE);
                return;
            }
            if (!this._extension) {
                this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                return;
            }
            // get networkInfo from extension
            const infoPayload = await this._extension.info();
            if (infoPayload &&
                this._networkInfo.getValue().chainID !== infoPayload.chainID) {
                this._networkInfo.next(infoPayload);
            }
            if (this.options.enableWalletConnection) {
                //const storageStoredWalletAddress: string | null = getStoredAddress();
                const session = (0, storage_1.getStoredSession)();
                // if the storage has wallet address
                if (session && terra_js_1.AccAddress.validate(session.walletAddress)) {
                    this._status.next(types_1.ChromeExtensionStatus.WALLET_CONNECTED);
                    const connectResult = await this._extension.connect();
                    // if address of extension is not same with the address of localStorage
                    if (connectResult.address &&
                        terra_js_1.AccAddress.validate(connectResult.address)) {
                        (0, storage_1.storeSession)({
                            walletAddress: connectResult.address,
                            identifier: session.identifier,
                        });
                    }
                    if (!!connectResult.address) {
                        if (this._terraAddress.getValue() !== connectResult.address) {
                            this._terraAddress.next(connectResult.address);
                        }
                    }
                    else {
                        (0, storage_1.clearSession)();
                        this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    }
                }
                else {
                    if (session) {
                        (0, storage_1.clearSession)();
                    }
                    this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    this._terraAddress.next(null);
                }
            }
            else {
                this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                this._terraAddress.next(null);
            }
        };
        this.connect = async (identifier) => {
            var _a;
            const extensionInfos = (0, multiChannel_1.getTerraChromeExtensions)();
            if (extensionInfos.length === 0) {
                return false;
            }
            let extensionInfo;
            if (identifier) {
                extensionInfo = extensionInfos.find((item) => item.identifier === identifier);
            }
            else if (extensionInfos.length === 1) {
                extensionInfo = extensionInfos[0];
            }
            else {
                const select = (_a = this.options.selectExtension) !== null && _a !== void 0 ? _a : defaultSelectModal_1.defaultSelectModal;
                const selection = await select(extensionInfos);
                if (selection) {
                    extensionInfo = selection;
                }
            }
            if (extensionInfo) {
                this._extension = (0, extensionFixer_1.extensionFixer)(extensionInfo.identifier);
                const result = await this._extension.connect();
                if (result === null || result === void 0 ? void 0 : result.address) {
                    const walletAddress = result.address;
                    (0, storage_1.storeSession)({
                        identifier: extensionInfo.identifier,
                        walletAddress,
                    });
                    await this.checkStatus();
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        this.disconnect = () => {
            (0, storage_1.clearSession)();
            this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
            this._terraAddress.next(null);
            this._extension = null;
        };
        this.recheckStatus = () => {
            if (this._extension && !this._extension.inTransactionProgress()) {
                this.checkStatus();
            }
        };
        this.post = (data) => {
            if (!this._extension) {
                throw new Error(`There is no connected wallet`);
            }
            return this._extension.post(data);
        };
        this.sign = (data) => {
            if (!this._extension) {
                throw new Error(`There is no connected wallet`);
            }
            return this._extension.sign(data);
        };
        this.isDesktopChrome =
            typeof window !== 'undefined' &&
                (0, browser_check_1.isDesktopChrome)(options.dangerously__chromeExtensionCompatibleBrowserCheck(navigator.userAgent));
        this._status = new rxjs_1.BehaviorSubject(this.isDesktopChrome
            ? types_1.ChromeExtensionStatus.INITIALIZING
            : types_1.ChromeExtensionStatus.UNAVAILABLE);
        this._networkInfo = new rxjs_1.BehaviorSubject(options.defaultNetwork);
        this.extensionInfos = (0, multiChannel_1.getTerraChromeExtensions)();
        if (!this.isDesktopChrome) {
            this._terraAddress = new rxjs_1.BehaviorSubject(null);
            return;
        }
        // ---------------------------------------------
        // initialize session
        // ---------------------------------------------
        if (this.extensionInfos.length === 0) {
            this._terraAddress = new rxjs_1.BehaviorSubject(null);
            this._status.next(types_1.ChromeExtensionStatus.UNAVAILABLE);
            return;
        }
        const session = (0, storage_1.getStoredSession)();
        if (!session ||
            !this.extensionInfos.some((item) => item.identifier === session.identifier)) {
            this._terraAddress = new rxjs_1.BehaviorSubject(null);
            this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
            return;
        }
        this._terraAddress = new rxjs_1.BehaviorSubject(session.walletAddress);
        this._extension = (0, extensionFixer_1.extensionFixer)(session.identifier);
        this.checkStatus();
    }
}
exports.ChromeExtensionController = ChromeExtensionController;
//# sourceMappingURL=data:application/json;base64,