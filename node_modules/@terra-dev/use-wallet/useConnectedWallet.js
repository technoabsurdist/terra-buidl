import { AccAddress } from '@terra-money/terra.js';
import { useMemo } from 'react';
import { ConnectType, WalletStatus } from './types';
import { useWallet } from './useWallet';
export function useConnectedWallet() {
    const { status, network, wallets, post, sign } = useWallet();
    const value = useMemo(() => {
        try {
            if (status === WalletStatus.WALLET_CONNECTED &&
                wallets.length > 0 &&
                AccAddress.validate(wallets[0].terraAddress)) {
                const { terraAddress, connectType, design } = wallets[0];
                return {
                    network,
                    terraAddress: terraAddress,
                    walletAddress: terraAddress,
                    design,
                    post: (tx) => {
                        return post(tx, { terraAddress });
                    },
                    sign: (tx) => {
                        return sign(tx, { terraAddress });
                    },
                    availablePost: connectType === ConnectType.WEB_CONNECT ||
                        connectType === ConnectType.CHROME_EXTENSION ||
                        connectType === ConnectType.WALLETCONNECT,
                    availableSign: connectType === ConnectType.CHROME_EXTENSION,
                    connectType,
                };
            }
            else {
                return undefined;
            }
        }
        catch (_a) {
            return undefined;
        }
    }, [network, post, sign, status, wallets]);
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlQ29ubmVjdGVkV2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0B0ZXJyYS1kZXYvdXNlLXdhbGxldC91c2VDb25uZWN0ZWRXYWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFnQnhDLE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQztJQUU3RCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQThCLEdBQUcsRUFBRTtRQUN0RCxJQUFJO1lBQ0YsSUFDRSxNQUFNLEtBQUssWUFBWSxDQUFDLGdCQUFnQjtnQkFDeEMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNsQixVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFDNUM7Z0JBQ0EsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV6RCxPQUFPO29CQUNMLE9BQU87b0JBQ1AsWUFBWSxFQUFFLFlBQXlCO29CQUN2QyxhQUFhLEVBQUUsWUFBeUI7b0JBQ3hDLE1BQU07b0JBQ04sSUFBSSxFQUFFLENBQUMsRUFBbUIsRUFBRSxFQUFFO3dCQUM1QixPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO29CQUNwQyxDQUFDO29CQUNELElBQUksRUFBRSxDQUFDLEVBQW1CLEVBQUUsRUFBRTt3QkFDNUIsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztvQkFDcEMsQ0FBQztvQkFDRCxhQUFhLEVBQ1gsV0FBVyxLQUFLLFdBQVcsQ0FBQyxXQUFXO3dCQUN2QyxXQUFXLEtBQUssV0FBVyxDQUFDLGdCQUFnQjt3QkFDNUMsV0FBVyxLQUFLLFdBQVcsQ0FBQyxhQUFhO29CQUMzQyxhQUFhLEVBQUUsV0FBVyxLQUFLLFdBQVcsQ0FBQyxnQkFBZ0I7b0JBQzNELFdBQVc7aUJBQ1osQ0FBQzthQUNIO2lCQUFNO2dCQUNMLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1NBQ0Y7UUFBQyxXQUFNO1lBQ04sT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUUzQyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXR3b3JrSW5mbywgU2lnblJlc3VsdCB9IGZyb20gJ0B0ZXJyYS1kZXYvd2FsbGV0LXR5cGVzJztcbmltcG9ydCB7IEFjY0FkZHJlc3MsIENyZWF0ZVR4T3B0aW9ucyB9IGZyb20gJ0B0ZXJyYS1tb25leS90ZXJyYS5qcyc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVHhSZXN1bHQgfSBmcm9tICcuL3R4JztcbmltcG9ydCB7IENvbm5lY3RUeXBlLCBXYWxsZXRTdGF0dXMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHVzZVdhbGxldCB9IGZyb20gJy4vdXNlV2FsbGV0JztcblxudHlwZSBIdW1hbkFkZHIgPSBzdHJpbmcgJiB7IF9fdHlwZTogJ0h1bWFuQWRkcicgfTtcblxuZXhwb3J0IGludGVyZmFjZSBDb25uZWN0ZWRXYWxsZXQge1xuICBuZXR3b3JrOiBOZXR3b3JrSW5mbztcbiAgdGVycmFBZGRyZXNzOiBIdW1hbkFkZHI7XG4gIHdhbGxldEFkZHJlc3M6IEh1bWFuQWRkcjtcbiAgZGVzaWduPzogc3RyaW5nO1xuICBwb3N0OiAodHg6IENyZWF0ZVR4T3B0aW9ucykgPT4gUHJvbWlzZTxUeFJlc3VsdD47XG4gIHNpZ246ICh0eDogQ3JlYXRlVHhPcHRpb25zKSA9PiBQcm9taXNlPFNpZ25SZXN1bHQ+O1xuICBhdmFpbGFibGVQb3N0OiBib29sZWFuO1xuICBhdmFpbGFibGVTaWduOiBib29sZWFuO1xuICBjb25uZWN0VHlwZTogQ29ubmVjdFR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb25uZWN0ZWRXYWxsZXQoKTogQ29ubmVjdGVkV2FsbGV0IHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgeyBzdGF0dXMsIG5ldHdvcmssIHdhbGxldHMsIHBvc3QsIHNpZ24gfSA9IHVzZVdhbGxldCgpO1xuXG4gIGNvbnN0IHZhbHVlID0gdXNlTWVtbzxDb25uZWN0ZWRXYWxsZXQgfCB1bmRlZmluZWQ+KCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKFxuICAgICAgICBzdGF0dXMgPT09IFdhbGxldFN0YXR1cy5XQUxMRVRfQ09OTkVDVEVEICYmXG4gICAgICAgIHdhbGxldHMubGVuZ3RoID4gMCAmJlxuICAgICAgICBBY2NBZGRyZXNzLnZhbGlkYXRlKHdhbGxldHNbMF0udGVycmFBZGRyZXNzKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHsgdGVycmFBZGRyZXNzLCBjb25uZWN0VHlwZSwgZGVzaWduIH0gPSB3YWxsZXRzWzBdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmV0d29yayxcbiAgICAgICAgICB0ZXJyYUFkZHJlc3M6IHRlcnJhQWRkcmVzcyBhcyBIdW1hbkFkZHIsXG4gICAgICAgICAgd2FsbGV0QWRkcmVzczogdGVycmFBZGRyZXNzIGFzIEh1bWFuQWRkcixcbiAgICAgICAgICBkZXNpZ24sXG4gICAgICAgICAgcG9zdDogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwb3N0KHR4LCB7IHRlcnJhQWRkcmVzcyB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNpZ246ICh0eDogQ3JlYXRlVHhPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbih0eCwgeyB0ZXJyYUFkZHJlc3MgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdmFpbGFibGVQb3N0OlxuICAgICAgICAgICAgY29ubmVjdFR5cGUgPT09IENvbm5lY3RUeXBlLldFQl9DT05ORUNUIHx8XG4gICAgICAgICAgICBjb25uZWN0VHlwZSA9PT0gQ29ubmVjdFR5cGUuQ0hST01FX0VYVEVOU0lPTiB8fFxuICAgICAgICAgICAgY29ubmVjdFR5cGUgPT09IENvbm5lY3RUeXBlLldBTExFVENPTk5FQ1QsXG4gICAgICAgICAgYXZhaWxhYmxlU2lnbjogY29ubmVjdFR5cGUgPT09IENvbm5lY3RUeXBlLkNIUk9NRV9FWFRFTlNJT04sXG4gICAgICAgICAgY29ubmVjdFR5cGUsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIFtuZXR3b3JrLCBwb3N0LCBzaWduLCBzdGF0dXMsIHdhbGxldHNdKTtcblxuICByZXR1cm4gdmFsdWU7XG59XG4iXX0=