import { createContext, useContext } from 'react';
// @ts-ignore
export const WalletContext = createContext();
export function useWallet() {
    return useContext(WalletContext);
}
/**
 * can use insteadof useWallet() on the class component
 */
export const WalletConsumer = WalletContext.Consumer;
//# sourceMappingURL=data:application/json;base64,