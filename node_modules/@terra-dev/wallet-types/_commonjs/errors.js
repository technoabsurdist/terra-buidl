"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxUnspecifiedError = exports.Timeout = exports.TxFailed = exports.CreateTxFailed = exports.UserDenied = void 0;
/** User denied the request */
class UserDenied extends Error {
    constructor() {
        super('User Denied');
        this.toString = () => {
            return `[${this.name}]`;
        };
        this.name = 'UserDenied';
    }
}
exports.UserDenied = UserDenied;
/** Failed to create tx (did not make a txhash) */
class CreateTxFailed extends Error {
    constructor(tx, message) {
        super(message);
        this.tx = tx;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}`;
        };
        this.name = 'CreateTxFailed';
    }
}
exports.CreateTxFailed = CreateTxFailed;
/** Failed process the tx (maked a txhash) */
class TxFailed extends Error {
    constructor(tx, txhash, message, raw_message) {
        super(message);
        this.tx = tx;
        this.txhash = txhash;
        this.raw_message = raw_message;
        this.toString = () => {
            return `[${this.name} txhash="${this.txhash}" message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}\n${JSON.stringify(this.raw_message, null, 2)}`;
        };
        this.name = 'TxFailed';
    }
}
exports.TxFailed = TxFailed;
/** the user did not complete the action during a specific time */
class Timeout extends Error {
    constructor(message) {
        super(message);
        this.toString = () => {
            return `[${this.name} message="${this.message}"]`;
        };
        this.name = 'Timeout';
    }
}
exports.Timeout = Timeout;
/** Unknown error */
class TxUnspecifiedError extends Error {
    constructor(tx, message) {
        super(message);
        this.tx = tx;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}`;
        };
        this.name = 'TxUnspecifiedError';
    }
}
exports.TxUnspecifiedError = TxUnspecifiedError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1kZXYvd2FsbGV0LXR5cGVzL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw4QkFBOEI7QUFDOUIsTUFBYSxVQUFXLFNBQVEsS0FBSztJQUNuQztRQUNFLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUl2QixhQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ2QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUMxQixDQUFDLENBQUM7UUFMQSxJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztJQUMzQixDQUFDO0NBS0Y7QUFURCxnQ0FTQztBQUVELGtEQUFrRDtBQUNsRCxNQUFhLGNBQWUsU0FBUSxLQUFLO0lBQ3ZDLFlBQTRCLEVBQW1CLEVBQUUsT0FBZTtRQUM5RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFEVyxPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUsvQyxhQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ2QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLGFBQWEsSUFBSSxDQUFDLE9BQU8sT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNoRSxJQUFJLENBQUMsRUFBRSxFQUNQLElBQUksRUFDSixDQUFDLENBQ0YsRUFBRSxDQUFDO1FBQ04sQ0FBQyxDQUFDO1FBVEEsSUFBSSxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0NBU0Y7QUFiRCx3Q0FhQztBQUVELDZDQUE2QztBQUM3QyxNQUFhLFFBQVMsU0FBUSxLQUFLO0lBQ2pDLFlBQ2tCLEVBQW1CLEVBQ25CLE1BQTBCLEVBQzFDLE9BQWUsRUFDQyxXQUFnQjtRQUVoQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFMQyxPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFvQjtRQUUxQixnQkFBVyxHQUFYLFdBQVcsQ0FBSztRQU1sQyxhQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ2QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLFlBQVksSUFBSSxDQUFDLE1BQU0sY0FDekMsSUFBSSxDQUFDLE9BQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQ3hELElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksRUFDSixDQUFDLENBQ0YsRUFBRSxDQUFDO1FBQ04sQ0FBQyxDQUFDO1FBWEEsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7SUFDekIsQ0FBQztDQVdGO0FBcEJELDRCQW9CQztBQUVELGtFQUFrRTtBQUNsRSxNQUFhLE9BQVEsU0FBUSxLQUFLO0lBQ2hDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFJakIsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxhQUFhLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQztRQUNwRCxDQUFDLENBQUM7UUFMQSxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUN4QixDQUFDO0NBS0Y7QUFURCwwQkFTQztBQUVELG9CQUFvQjtBQUNwQixNQUFhLGtCQUFtQixTQUFRLEtBQUs7SUFDM0MsWUFBNEIsRUFBbUIsRUFBRSxPQUFlO1FBQzlELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQURXLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBSy9DLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksYUFBYSxJQUFJLENBQUMsT0FBTyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ2hFLElBQUksQ0FBQyxFQUFFLEVBQ1AsSUFBSSxFQUNKLENBQUMsQ0FDRixFQUFFLENBQUM7UUFDTixDQUFDLENBQUM7UUFUQSxJQUFJLENBQUMsSUFBSSxHQUFHLG9CQUFvQixDQUFDO0lBQ25DLENBQUM7Q0FTRjtBQWJELGdEQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcblxuLyoqIFVzZXIgZGVuaWVkIHRoZSByZXF1ZXN0ICovXG5leHBvcnQgY2xhc3MgVXNlckRlbmllZCBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1VzZXIgRGVuaWVkJyk7XG4gICAgdGhpcy5uYW1lID0gJ1VzZXJEZW5pZWQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9XWA7XG4gIH07XG59XG5cbi8qKiBGYWlsZWQgdG8gY3JlYXRlIHR4IChkaWQgbm90IG1ha2UgYSB0eGhhc2gpICovXG5leHBvcnQgY2xhc3MgQ3JlYXRlVHhGYWlsZWQgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB0eDogQ3JlYXRlVHhPcHRpb25zLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnQ3JlYXRlVHhGYWlsZWQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9IG1lc3NhZ2U9XCIke3RoaXMubWVzc2FnZX1cIl1cXG4ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgdGhpcy50eCxcbiAgICAgIG51bGwsXG4gICAgICAyLFxuICAgICl9YDtcbiAgfTtcbn1cblxuLyoqIEZhaWxlZCBwcm9jZXNzIHRoZSB0eCAobWFrZWQgYSB0eGhhc2gpICovXG5leHBvcnQgY2xhc3MgVHhGYWlsZWQgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSB0eDogQ3JlYXRlVHhPcHRpb25zLFxuICAgIHB1YmxpYyByZWFkb25seSB0eGhhc2g6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IHJhd19tZXNzYWdlOiBhbnksXG4gICkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdUeEZhaWxlZCc7XG4gIH1cblxuICB0b1N0cmluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gYFske3RoaXMubmFtZX0gdHhoYXNoPVwiJHt0aGlzLnR4aGFzaH1cIiBtZXNzYWdlPVwiJHtcbiAgICAgIHRoaXMubWVzc2FnZVxuICAgIH1cIl1cXG4ke0pTT04uc3RyaW5naWZ5KHRoaXMudHgsIG51bGwsIDIpfVxcbiR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICB0aGlzLnJhd19tZXNzYWdlLFxuICAgICAgbnVsbCxcbiAgICAgIDIsXG4gICAgKX1gO1xuICB9O1xufVxuXG4vKiogdGhlIHVzZXIgZGlkIG5vdCBjb21wbGV0ZSB0aGUgYWN0aW9uIGR1cmluZyBhIHNwZWNpZmljIHRpbWUgKi9cbmV4cG9ydCBjbGFzcyBUaW1lb3V0IGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnVGltZW91dCc7XG4gIH1cblxuICB0b1N0cmluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gYFske3RoaXMubmFtZX0gbWVzc2FnZT1cIiR7dGhpcy5tZXNzYWdlfVwiXWA7XG4gIH07XG59XG5cbi8qKiBVbmtub3duIGVycm9yICovXG5leHBvcnQgY2xhc3MgVHhVbnNwZWNpZmllZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdHg6IENyZWF0ZVR4T3B0aW9ucywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ1R4VW5zcGVjaWZpZWRFcnJvcic7XG4gIH1cblxuICB0b1N0cmluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gYFske3RoaXMubmFtZX0gbWVzc2FnZT1cIiR7dGhpcy5tZXNzYWdlfVwiXVxcbiR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICB0aGlzLnR4LFxuICAgICAgbnVsbCxcbiAgICAgIDIsXG4gICAgKX1gO1xuICB9O1xufVxuIl19