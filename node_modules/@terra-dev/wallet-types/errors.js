/** User denied the request */
export class UserDenied extends Error {
    constructor() {
        super('User Denied');
        this.toString = () => {
            return `[${this.name}]`;
        };
        this.name = 'UserDenied';
    }
}
/** Failed to create tx (did not make a txhash) */
export class CreateTxFailed extends Error {
    constructor(tx, message) {
        super(message);
        this.tx = tx;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}`;
        };
        this.name = 'CreateTxFailed';
    }
}
/** Failed process the tx (maked a txhash) */
export class TxFailed extends Error {
    constructor(tx, txhash, message, raw_message) {
        super(message);
        this.tx = tx;
        this.txhash = txhash;
        this.raw_message = raw_message;
        this.toString = () => {
            return `[${this.name} txhash="${this.txhash}" message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}\n${JSON.stringify(this.raw_message, null, 2)}`;
        };
        this.name = 'TxFailed';
    }
}
/** the user did not complete the action during a specific time */
export class Timeout extends Error {
    constructor(message) {
        super(message);
        this.toString = () => {
            return `[${this.name} message="${this.message}"]`;
        };
        this.name = 'Timeout';
    }
}
/** Unknown error */
export class TxUnspecifiedError extends Error {
    constructor(tx, message) {
        super(message);
        this.tx = tx;
        this.toString = () => {
            return `[${this.name} message="${this.message}"]\n${JSON.stringify(this.tx, null, 2)}`;
        };
        this.name = 'TxUnspecifiedError';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0B0ZXJyYS1kZXYvd2FsbGV0LXR5cGVzL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw4QkFBOEI7QUFDOUIsTUFBTSxPQUFPLFVBQVcsU0FBUSxLQUFLO0lBQ25DO1FBQ0UsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBSXZCLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO1FBQzFCLENBQUMsQ0FBQztRQUxBLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0lBQzNCLENBQUM7Q0FLRjtBQUVELGtEQUFrRDtBQUNsRCxNQUFNLE9BQU8sY0FBZSxTQUFRLEtBQUs7SUFDdkMsWUFBNEIsRUFBbUIsRUFBRSxPQUFlO1FBQzlELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQURXLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBSy9DLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksYUFBYSxJQUFJLENBQUMsT0FBTyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ2hFLElBQUksQ0FBQyxFQUFFLEVBQ1AsSUFBSSxFQUNKLENBQUMsQ0FDRixFQUFFLENBQUM7UUFDTixDQUFDLENBQUM7UUFUQSxJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7Q0FTRjtBQUVELDZDQUE2QztBQUM3QyxNQUFNLE9BQU8sUUFBUyxTQUFRLEtBQUs7SUFDakMsWUFDa0IsRUFBbUIsRUFDbkIsTUFBMEIsRUFDMUMsT0FBZSxFQUNDLFdBQWdCO1FBRWhDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUxDLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBQ25CLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBRTFCLGdCQUFXLEdBQVgsV0FBVyxDQUFLO1FBTWxDLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksWUFBWSxJQUFJLENBQUMsTUFBTSxjQUN6QyxJQUFJLENBQUMsT0FDUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FDeEQsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxFQUNKLENBQUMsQ0FDRixFQUFFLENBQUM7UUFDTixDQUFDLENBQUM7UUFYQSxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUN6QixDQUFDO0NBV0Y7QUFFRCxrRUFBa0U7QUFDbEUsTUFBTSxPQUFPLE9BQVEsU0FBUSxLQUFLO0lBQ2hDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFJakIsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxhQUFhLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQztRQUNwRCxDQUFDLENBQUM7UUFMQSxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUN4QixDQUFDO0NBS0Y7QUFFRCxvQkFBb0I7QUFDcEIsTUFBTSxPQUFPLGtCQUFtQixTQUFRLEtBQUs7SUFDM0MsWUFBNEIsRUFBbUIsRUFBRSxPQUFlO1FBQzlELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQURXLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBSy9DLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksYUFBYSxJQUFJLENBQUMsT0FBTyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ2hFLElBQUksQ0FBQyxFQUFFLEVBQ1AsSUFBSSxFQUNKLENBQUMsQ0FDRixFQUFFLENBQUM7UUFDTixDQUFDLENBQUM7UUFUQSxJQUFJLENBQUMsSUFBSSxHQUFHLG9CQUFvQixDQUFDO0lBQ25DLENBQUM7Q0FTRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZVR4T3B0aW9ucyB9IGZyb20gJ0B0ZXJyYS1tb25leS90ZXJyYS5qcyc7XG5cbi8qKiBVc2VyIGRlbmllZCB0aGUgcmVxdWVzdCAqL1xuZXhwb3J0IGNsYXNzIFVzZXJEZW5pZWQgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdVc2VyIERlbmllZCcpO1xuICAgIHRoaXMubmFtZSA9ICdVc2VyRGVuaWVkJztcbiAgfVxuXG4gIHRvU3RyaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiBgWyR7dGhpcy5uYW1lfV1gO1xuICB9O1xufVxuXG4vKiogRmFpbGVkIHRvIGNyZWF0ZSB0eCAoZGlkIG5vdCBtYWtlIGEgdHhoYXNoKSAqL1xuZXhwb3J0IGNsYXNzIENyZWF0ZVR4RmFpbGVkIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdHg6IENyZWF0ZVR4T3B0aW9ucywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0NyZWF0ZVR4RmFpbGVkJztcbiAgfVxuXG4gIHRvU3RyaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiBgWyR7dGhpcy5uYW1lfSBtZXNzYWdlPVwiJHt0aGlzLm1lc3NhZ2V9XCJdXFxuJHtKU09OLnN0cmluZ2lmeShcbiAgICAgIHRoaXMudHgsXG4gICAgICBudWxsLFxuICAgICAgMixcbiAgICApfWA7XG4gIH07XG59XG5cbi8qKiBGYWlsZWQgcHJvY2VzcyB0aGUgdHggKG1ha2VkIGEgdHhoYXNoKSAqL1xuZXhwb3J0IGNsYXNzIFR4RmFpbGVkIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHhoYXNoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSByYXdfbWVzc2FnZTogYW55LFxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnVHhGYWlsZWQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9IHR4aGFzaD1cIiR7dGhpcy50eGhhc2h9XCIgbWVzc2FnZT1cIiR7XG4gICAgICB0aGlzLm1lc3NhZ2VcbiAgICB9XCJdXFxuJHtKU09OLnN0cmluZ2lmeSh0aGlzLnR4LCBudWxsLCAyKX1cXG4ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgdGhpcy5yYXdfbWVzc2FnZSxcbiAgICAgIG51bGwsXG4gICAgICAyLFxuICAgICl9YDtcbiAgfTtcbn1cblxuLyoqIHRoZSB1c2VyIGRpZCBub3QgY29tcGxldGUgdGhlIGFjdGlvbiBkdXJpbmcgYSBzcGVjaWZpYyB0aW1lICovXG5leHBvcnQgY2xhc3MgVGltZW91dCBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ1RpbWVvdXQnO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9IG1lc3NhZ2U9XCIke3RoaXMubWVzc2FnZX1cIl1gO1xuICB9O1xufVxuXG4vKiogVW5rbm93biBlcnJvciAqL1xuZXhwb3J0IGNsYXNzIFR4VW5zcGVjaWZpZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHR4OiBDcmVhdGVUeE9wdGlvbnMsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdUeFVuc3BlY2lmaWVkRXJyb3InO1xuICB9XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLm5hbWV9IG1lc3NhZ2U9XCIke3RoaXMubWVzc2FnZX1cIl1cXG4ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgdGhpcy50eCxcbiAgICAgIG51bGwsXG4gICAgICAyLFxuICAgICl9YDtcbiAgfTtcbn1cbiJdfQ==