"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@walletconnect/utils");
const network_1 = __importDefault(require("./network"));
// @ts-ignore
const WS = typeof global.WebSocket !== 'undefined' ? global.WebSocket : require('ws');
// -- SocketTransport ------------------------------------------------------ //
class SocketTransport {
    // -- constructor ----------------------------------------------------- //
    constructor(opts) {
        this.opts = opts;
        this._queue = [];
        this._events = [];
        this._subscriptions = [];
        // -- public ---------------------------------------------------------- //
        this.open = () => {
            this._socketCreate();
        };
        this.close = () => {
            this._socketClose();
        };
        this.send = (message, topic, silent) => {
            if (!topic || typeof topic !== 'string') {
                throw new Error('Missing or invalid topic field');
            }
            this._socketSend({
                topic: topic,
                type: 'pub',
                payload: message,
                silent: !!silent,
            });
        };
        this.subscribe = (topic) => {
            this._socketSend({
                topic: topic,
                type: 'sub',
                payload: '',
                silent: true,
            });
        };
        this.on = (event, callback) => {
            this._events.push({ event, callback });
        };
        // -- private ---------------------------------------------------------- //
        this._socketCreate = () => {
            if (this._nextSocket) {
                return;
            }
            const url = getWebSocketUrl(this._url, this._protocol, this._version);
            this._nextSocket = new WS(url);
            if (!this._nextSocket) {
                throw new Error('Failed to create socket');
            }
            this._nextSocket.onmessage = (event) => this._socketReceive(event);
            this._nextSocket.onopen = () => this._socketOpen();
            this._nextSocket.onerror = (event) => this._socketError(event);
            this._nextSocket.onclose = () => {
                this._nextSocket = null;
                setTimeout(this._socketCreate, 500);
            };
        };
        this._socketOpen = () => {
            this._socketClose();
            this._socket = this._nextSocket;
            this._nextSocket = null;
            this._queueSubscriptions();
            this._pushQueue();
        };
        this._socketClose = () => {
            if (this._socket) {
                this._socket.onclose = () => {
                    // empty
                };
                this._socket.close();
            }
        };
        this._socketSend = (socketMessage) => {
            const message = JSON.stringify(socketMessage);
            if (this._socket && this._socket.readyState === 1) {
                this._socket.send(message);
            }
            else {
                this._setToQueue(socketMessage);
                this._socketCreate();
            }
        };
        this._socketReceive = async (event) => {
            let socketMessage;
            try {
                socketMessage = JSON.parse(event.data);
            }
            catch (error) {
                return;
            }
            this._socketSend({
                topic: socketMessage.topic,
                type: 'ack',
                payload: '',
                silent: true,
            });
            if (this._socket && this._socket.readyState === 1) {
                const events = this._events.filter((itemEvent) => itemEvent.event === 'message');
                if (events && events.length) {
                    events.forEach((itemEvent) => itemEvent.callback(socketMessage));
                }
            }
        };
        this._socketError = (e) => {
            const events = this._events.filter((event) => event.event === 'error');
            if (events && events.length) {
                events.forEach((event) => event.callback(e));
            }
        };
        this._queueSubscriptions = () => {
            const subscriptions = this._subscriptions;
            subscriptions.forEach((topic) => this._queue.push({
                topic: topic,
                type: 'sub',
                payload: '',
                silent: true,
            }));
            this._subscriptions = this.opts.subscriptions || [];
        };
        this._setToQueue = (socketMessage) => {
            this._queue.push(socketMessage);
        };
        this._pushQueue = () => {
            const queue = this._queue;
            queue.forEach((socketMessage) => this._socketSend(socketMessage));
            this._queue = [];
        };
        this._protocol = opts.protocol;
        this._version = opts.version;
        this._url = '';
        this._netMonitor = null;
        this._socket = null;
        this._nextSocket = null;
        this._subscriptions = opts.subscriptions || [];
        this._netMonitor = opts.netMonitor || new network_1.default();
        if (!opts.url || typeof opts.url !== 'string') {
            throw new Error('Missing or invalid WebSocket url');
        }
        this._url = opts.url;
        this._netMonitor.on('online', () => this._socketCreate());
    }
    set readyState(value) {
        // empty
    }
    get readyState() {
        return this._socket ? this._socket.readyState : -1;
    }
    set connecting(value) {
        // empty
    }
    get connecting() {
        return this.readyState === 0;
    }
    set connected(value) {
        // empty
    }
    get connected() {
        return this.readyState === 1;
    }
    set closing(value) {
        // empty
    }
    get closing() {
        return this.readyState === 2;
    }
    set closed(value) {
        // empty
    }
    get closed() {
        return this.readyState === 3;
    }
}
function getWebSocketUrl(webUrl, protocol, version) {
    var _a, _b;
    const url = webUrl.startsWith('https')
        ? webUrl.replace('https', 'wss')
        : webUrl.startsWith('http')
            ? webUrl.replace('http', 'ws')
            : webUrl;
    const splitUrl = url.split('?');
    const params = (0, utils_1.isBrowser)()
        ? {
            protocol,
            version,
            env: 'browser',
            host: ((_a = (0, utils_1.getLocation)()) === null || _a === void 0 ? void 0 : _a.host) || '',
        }
        : {
            protocol,
            version,
            env: ((_b = (0, utils_1.detectEnv)()) === null || _b === void 0 ? void 0 : _b.name) || '',
        };
    const queryString = (0, utils_1.appendToQueryString)((0, utils_1.getQueryString)(splitUrl[1] || ''), params);
    return splitUrl[0] + '?' + queryString;
}
exports.default = SocketTransport;
//# sourceMappingURL=data:application/json;base64,