"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebConnectorController = void 0;
const web_connector_interface_1 = require("@terra-dev/web-connector-interface");
const bowser_1 = __importDefault(require("bowser"));
const rxjs_1 = require("rxjs");
async function getConnector(hostWindow) {
    return new Promise((resolve) => {
        let count = 20;
        function task() {
            if (--count > 0) {
                if (typeof hostWindow.terraWebConnectors !== 'undefined' &&
                    Array.isArray(hostWindow.terraWebConnectors) &&
                    hostWindow.terraWebConnectors.length > 0) {
                    console.log(`TerraWebConnector: `, JSON.stringify(hostWindow.terraWebConnectors[0].getInfo()));
                    resolve(hostWindow.terraWebConnectors[0]);
                }
                else {
                    console.warn(`Can't find window.terraWebConnectors. wait 500ms...`);
                    setTimeout(task, 500);
                }
            }
            else {
                resolve(undefined);
            }
        }
        task();
    });
}
class WebConnectorController {
    constructor(hostWindow) {
        this.hostWindow = hostWindow;
        this._connector = null;
        /**
         * Refetch the clientsStates
         *
         * You don't need call this method in most cases.
         * Normally, when the clientStates is changed, states() get the new clientStates.
         *
         * @example
         * client.states()
         *       .subscribe(states => {
         *         // 2. will get new clientStates
         *         console.log('Got new states', Date.now())
         *       })
         *
         * function callback() {
         *   // 1. refetch client states
         *   client.refetchStates()
         * }
         */
        this.refetchStates = () => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.refetchStates();
        };
        /**
         * Request approval connection to the Extension. (Connect)
         */
        this.requestApproval = () => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.requestApproval();
        };
        this.status = () => {
            return this._status.asObservable();
        };
        this.getLastStatus = () => {
            return this._status.getValue();
        };
        /**
         * Execute transaction
         *
         * @example
         * client.post(terraAddress, tx: CreateTxOptions)
         *       .subscribe({
         *          next: (result: WebConnectorTxProgress | WebConnectorTxSucceed) => {
         *            switch (result.status) {
         *              case WebConnectorTxStatus.PROGRESS:
         *                console.log('in progress', result.payload)
         *                break;
         *              case WebConnectorTxStatus.SUCCEED:
         *                console.log('succeed', result.payload)
         *                break;
         *            }
         *          },
         *          error: (error) => {
         *            if (error instanceof WebConnectorUserDenied) {
         *              console.log('user denied')
         *            } else if (error instanceof WebConnectorCreateTxFailed) {
         *              console.log('create tx failed', error.message)
         *            } else if (error instanceof WebConnectorTxFailed) {
         *              console.log('tx failed', error.txhash, error.message, error.raw_message)
         *            } else {
         *              console.log('unspecified error', 'message' in error ? error.message : String(error))
         *            }
         *          }
         *       })
         *
         * @description The stream will be
         * TxProgress -> [...TxProgress] -> TxSucceed
         *
         * - Tx is Succeed : TxProgress -> [...TxProgress] -> TxSucceed
         */
        this.post = (terraAddress, tx) => {
            return this._connector.post(terraAddress, tx);
        };
        this.hasCW20Tokens = (chainID, ...tokenAddrs) => {
            return this._connector.hasCW20Tokens(chainID, ...tokenAddrs);
        };
        /**
         * Add CW20 Token to extension dashboard
         */
        this.addCW20Tokens = (chainID, ...tokenAddrs) => {
            return this._connector.addCW20Tokens(chainID, ...tokenAddrs);
        };
        this.hasNetwork = (chainID, lcd) => {
            return this._connector.hasNetwork({
                chainID,
                lcd,
            });
        };
        this.addNetwork = (name, chainID, lcd) => {
            return this._connector.addNetwork({
                name: name !== null && name !== void 0 ? name : '',
                chainID,
                lcd,
            });
        };
        /**
         * @example
         * client.states()
         *       .subscribe(states => {
         *         if (!states) {
         *           console.log('client is still not ready')
         *         } else {
         *           console.log('current network is', states.network)
         *           console.log('current wallets are', states.wallets)
         *         }
         *       })
         */
        this.states = () => {
            return this._states.asObservable();
        };
        this.getLastStates = () => {
            return this._states.getValue();
        };
        /**
         * Destroy this client
         *
         * - Unsubscribe all RxJs Subjects (every Observables are stoped)
         */
        this.destroy = () => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
            this._connector = null;
        };
        this._status = new rxjs_1.BehaviorSubject({
            type: web_connector_interface_1.WebConnectorStatusType.INITIALIZING,
        });
        this._states = new rxjs_1.BehaviorSubject(null);
        const browser = bowser_1.default.getParser(navigator.userAgent);
        //@ts-ignore
        getConnector(hostWindow).then((connector) => {
            if (!connector) {
                const name = browser.getBrowserName(true);
                let installLink;
                switch (name) {
                    case 'chrome':
                    case 'microsoft edge':
                        installLink = 'https://google.com/chrome';
                        break;
                    case 'firefox':
                        installLink = 'https://google.com/firefox';
                        break;
                    case 'safari':
                        installLink = 'https://google.com/safari';
                        break;
                    default:
                        installLink = 'https://google.com/chrome';
                        break;
                }
                this._status.next({
                    type: web_connector_interface_1.WebConnectorStatusType.NO_AVAILABLE,
                    isConnectorExists: false,
                    installLink,
                });
                return;
            }
            if (!connector.checkBrowserAvailability(navigator.userAgent)) {
                this._status.next({
                    type: web_connector_interface_1.WebConnectorStatusType.NO_AVAILABLE,
                    isConnectorExists: true,
                    isSupportBrowser: false,
                });
                return;
            }
            connector.open(hostWindow, this._status, this._states);
            this._connector = connector;
        });
    }
}
exports.WebConnectorController = WebConnectorController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLWRldi93ZWItY29ubmVjdG9yLWNvbnRyb2xsZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0ZBTTRDO0FBRTVDLG9EQUE0QjtBQUM1QiwrQkFBbUQ7QUFFbkQsS0FBSyxVQUFVLFlBQVksQ0FBQyxVQUUzQjtJQUNDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFZixTQUFTLElBQUk7WUFDWCxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRTtnQkFDZixJQUNFLE9BQU8sVUFBVSxDQUFDLGtCQUFrQixLQUFLLFdBQVc7b0JBQ3BELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO29CQUM1QyxVQUFVLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDeEM7b0JBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FDVCxxQkFBcUIsRUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FDM0QsQ0FBQztvQkFDRixPQUFPLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzNDO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMscURBQXFELENBQUMsQ0FBQztvQkFDcEUsVUFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDdkI7YUFDRjtpQkFBTTtnQkFDTCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDcEI7UUFDSCxDQUFDO1FBRUQsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFhLHNCQUFzQjtJ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QUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBdUlGO0FBbk1ELHdEQW1NQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFRlcnJhV2ViQ29ubmVjdG9yLFxuICBXZWJDb25uZWN0b3JTdGF0ZXMsXG4gIFdlYkNvbm5lY3RvclN0YXR1cyxcbiAgV2ViQ29ubmVjdG9yU3RhdHVzVHlwZSxcbiAgV2ViQ29ubmVjdG9yVHhSZXN1bHQsXG59IGZyb20gJ0B0ZXJyYS1kZXYvd2ViLWNvbm5lY3Rvci1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCBib3dzZXIgZnJvbSAnYm93c2VyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0b3IoaG9zdFdpbmRvdzoge1xuICB0ZXJyYVdlYkNvbm5lY3RvcnM6IFRlcnJhV2ViQ29ubmVjdG9yW10gfCB1bmRlZmluZWQ7XG59KTogUHJvbWlzZTxUZXJyYVdlYkNvbm5lY3RvciB8IHVuZGVmaW5lZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBsZXQgY291bnQgPSAyMDtcblxuICAgIGZ1bmN0aW9uIHRhc2soKSB7XG4gICAgICBpZiAoLS1jb3VudCA+IDApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBob3N0V2luZG93LnRlcnJhV2ViQ29ubmVjdG9ycyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBBcnJheS5pc0FycmF5KGhvc3RXaW5kb3cudGVycmFXZWJDb25uZWN0b3JzKSAmJlxuICAgICAgICAgIGhvc3RXaW5kb3cudGVycmFXZWJDb25uZWN0b3JzLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgVGVycmFXZWJDb25uZWN0b3I6IGAsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShob3N0V2luZG93LnRlcnJhV2ViQ29ubmVjdG9yc1swXS5nZXRJbmZvKCkpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzb2x2ZShob3N0V2luZG93LnRlcnJhV2ViQ29ubmVjdG9yc1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBDYW4ndCBmaW5kIHdpbmRvdy50ZXJyYVdlYkNvbm5lY3RvcnMuIHdhaXQgNTAwbXMuLi5gKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KHRhc2ssIDUwMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0YXNrKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgV2ViQ29ubmVjdG9yQ29udHJvbGxlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3N0YXR1czogQmVoYXZpb3JTdWJqZWN0PFdlYkNvbm5lY3RvclN0YXR1cz47XG4gIHByaXZhdGUgcmVhZG9ubHkgX3N0YXRlczogQmVoYXZpb3JTdWJqZWN0PFdlYkNvbm5lY3RvclN0YXRlcyB8IG51bGw+O1xuICBwcml2YXRlIF9jb25uZWN0b3I6IFRlcnJhV2ViQ29ubmVjdG9yIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBob3N0V2luZG93OiBXaW5kb3cpIHtcbiAgICB0aGlzLl9zdGF0dXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFdlYkNvbm5lY3RvclN0YXR1cz4oe1xuICAgICAgdHlwZTogV2ViQ29ubmVjdG9yU3RhdHVzVHlwZS5JTklUSUFMSVpJTkcsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9zdGF0ZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFdlYkNvbm5lY3RvclN0YXRlcyB8IG51bGw+KG51bGwpO1xuXG4gICAgY29uc3QgYnJvd3NlciA9IGJvd3Nlci5nZXRQYXJzZXIobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICAvL0B0cy1pZ25vcmVcbiAgICBnZXRDb25uZWN0b3IoaG9zdFdpbmRvdykudGhlbigoY29ubmVjdG9yKSA9PiB7XG4gICAgICBpZiAoIWNvbm5lY3Rvcikge1xuICAgICAgICBjb25zdCBuYW1lID0gYnJvd3Nlci5nZXRCcm93c2VyTmFtZSh0cnVlKTtcblxuICAgICAgICBsZXQgaW5zdGFsbExpbms6IHN0cmluZztcblxuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdjaHJvbWUnOlxuICAgICAgICAgIGNhc2UgJ21pY3Jvc29mdCBlZGdlJzpcbiAgICAgICAgICAgIGluc3RhbGxMaW5rID0gJ2h0dHBzOi8vZ29vZ2xlLmNvbS9jaHJvbWUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZmlyZWZveCc6XG4gICAgICAgICAgICBpbnN0YWxsTGluayA9ICdodHRwczovL2dvb2dsZS5jb20vZmlyZWZveCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzYWZhcmknOlxuICAgICAgICAgICAgaW5zdGFsbExpbmsgPSAnaHR0cHM6Ly9nb29nbGUuY29tL3NhZmFyaSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaW5zdGFsbExpbmsgPSAnaHR0cHM6Ly9nb29nbGUuY29tL2Nocm9tZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3N0YXR1cy5uZXh0KHtcbiAgICAgICAgICB0eXBlOiBXZWJDb25uZWN0b3JTdGF0dXNUeXBlLk5PX0FWQUlMQUJMRSxcbiAgICAgICAgICBpc0Nvbm5lY3RvckV4aXN0czogZmFsc2UsXG4gICAgICAgICAgaW5zdGFsbExpbmssXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb25uZWN0b3IuY2hlY2tCcm93c2VyQXZhaWxhYmlsaXR5KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIHRoaXMuX3N0YXR1cy5uZXh0KHtcbiAgICAgICAgICB0eXBlOiBXZWJDb25uZWN0b3JTdGF0dXNUeXBlLk5PX0FWQUlMQUJMRSxcbiAgICAgICAgICBpc0Nvbm5lY3RvckV4aXN0czogdHJ1ZSxcbiAgICAgICAgICBpc1N1cHBvcnRCcm93c2VyOiBmYWxzZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25uZWN0b3Iub3Blbihob3N0V2luZG93LCB0aGlzLl9zdGF0dXMsIHRoaXMuX3N0YXRlcyk7XG5cbiAgICAgIHRoaXMuX2Nvbm5lY3RvciA9IGNvbm5lY3RvcjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZldGNoIHRoZSBjbGllbnRzU3RhdGVzXG4gICAqXG4gICAqIFlvdSBkb24ndCBuZWVkIGNhbGwgdGhpcyBtZXRob2QgaW4gbW9zdCBjYXNlcy5cbiAgICogTm9ybWFsbHksIHdoZW4gdGhlIGNsaWVudFN0YXRlcyBpcyBjaGFuZ2VkLCBzdGF0ZXMoKSBnZXQgdGhlIG5ldyBjbGllbnRTdGF0ZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNsaWVudC5zdGF0ZXMoKVxuICAgKiAgICAgICAuc3Vic2NyaWJlKHN0YXRlcyA9PiB7XG4gICAqICAgICAgICAgLy8gMi4gd2lsbCBnZXQgbmV3IGNsaWVudFN0YXRlc1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgbmV3IHN0YXRlcycsIERhdGUubm93KCkpXG4gICAqICAgICAgIH0pXG4gICAqXG4gICAqIGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgKiAgIC8vIDEuIHJlZmV0Y2ggY2xpZW50IHN0YXRlc1xuICAgKiAgIGNsaWVudC5yZWZldGNoU3RhdGVzKClcbiAgICogfVxuICAgKi9cbiAgcmVmZXRjaFN0YXRlcyA9ICgpID0+IHtcbiAgICB0aGlzLl9jb25uZWN0b3I/LnJlZmV0Y2hTdGF0ZXMoKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVxdWVzdCBhcHByb3ZhbCBjb25uZWN0aW9uIHRvIHRoZSBFeHRlbnNpb24uIChDb25uZWN0KVxuICAgKi9cbiAgcmVxdWVzdEFwcHJvdmFsID0gKCkgPT4ge1xuICAgIHRoaXMuX2Nvbm5lY3Rvcj8ucmVxdWVzdEFwcHJvdmFsKCk7XG4gIH07XG5cbiAgc3RhdHVzID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXMuYXNPYnNlcnZhYmxlKCk7XG4gIH07XG5cbiAgZ2V0TGFzdFN0YXR1cyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzLmdldFZhbHVlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdHJhbnNhY3Rpb25cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2xpZW50LnBvc3QodGVycmFBZGRyZXNzLCB0eDogQ3JlYXRlVHhPcHRpb25zKVxuICAgKiAgICAgICAuc3Vic2NyaWJlKHtcbiAgICogICAgICAgICAgbmV4dDogKHJlc3VsdDogV2ViQ29ubmVjdG9yVHhQcm9ncmVzcyB8IFdlYkNvbm5lY3RvclR4U3VjY2VlZCkgPT4ge1xuICAgKiAgICAgICAgICAgIHN3aXRjaCAocmVzdWx0LnN0YXR1cykge1xuICAgKiAgICAgICAgICAgICAgY2FzZSBXZWJDb25uZWN0b3JUeFN0YXR1cy5QUk9HUkVTUzpcbiAgICogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2luIHByb2dyZXNzJywgcmVzdWx0LnBheWxvYWQpXG4gICAqICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgKiAgICAgICAgICAgICAgY2FzZSBXZWJDb25uZWN0b3JUeFN0YXR1cy5TVUNDRUVEOlxuICAgKiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc3VjY2VlZCcsIHJlc3VsdC5wYXlsb2FkKVxuICAgKiAgICAgICAgICAgICAgICBicmVhaztcbiAgICogICAgICAgICAgICB9XG4gICAqICAgICAgICAgIH0sXG4gICAqICAgICAgICAgIGVycm9yOiAoZXJyb3IpID0+IHtcbiAgICogICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBXZWJDb25uZWN0b3JVc2VyRGVuaWVkKSB7XG4gICAqICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXNlciBkZW5pZWQnKVxuICAgKiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBXZWJDb25uZWN0b3JDcmVhdGVUeEZhaWxlZCkge1xuICAgKiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZSB0eCBmYWlsZWQnLCBlcnJvci5tZXNzYWdlKVxuICAgKiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBXZWJDb25uZWN0b3JUeEZhaWxlZCkge1xuICAgKiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3R4IGZhaWxlZCcsIGVycm9yLnR4aGFzaCwgZXJyb3IubWVzc2FnZSwgZXJyb3IucmF3X21lc3NhZ2UpXG4gICAqICAgICAgICAgICAgfSBlbHNlIHtcbiAgICogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1bnNwZWNpZmllZCBlcnJvcicsICdtZXNzYWdlJyBpbiBlcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpKVxuICAgKiAgICAgICAgICAgIH1cbiAgICogICAgICAgICAgfVxuICAgKiAgICAgICB9KVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIHN0cmVhbSB3aWxsIGJlXG4gICAqIFR4UHJvZ3Jlc3MgLT4gWy4uLlR4UHJvZ3Jlc3NdIC0+IFR4U3VjY2VlZFxuICAgKlxuICAgKiAtIFR4IGlzIFN1Y2NlZWQgOiBUeFByb2dyZXNzIC0+IFsuLi5UeFByb2dyZXNzXSAtPiBUeFN1Y2NlZWRcbiAgICovXG4gIHBvc3QgPSAoXG4gICAgdGVycmFBZGRyZXNzOiBzdHJpbmcsXG4gICAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgKTogT2JzZXJ2YWJsZTxXZWJDb25uZWN0b3JUeFJlc3VsdD4gPT4ge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0b3IhLnBvc3QodGVycmFBZGRyZXNzLCB0eCk7XG4gIH07XG5cbiAgaGFzQ1cyMFRva2VucyA9IChjaGFpbklEOiBzdHJpbmcsIC4uLnRva2VuQWRkcnM6IHN0cmluZ1tdKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3RvciEuaGFzQ1cyMFRva2VucyhjaGFpbklELCAuLi50b2tlbkFkZHJzKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIENXMjAgVG9rZW4gdG8gZXh0ZW5zaW9uIGRhc2hib2FyZFxuICAgKi9cbiAgYWRkQ1cyMFRva2VucyA9IChjaGFpbklEOiBzdHJpbmcsIC4uLnRva2VuQWRkcnM6IHN0cmluZ1tdKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3RvciEuYWRkQ1cyMFRva2VucyhjaGFpbklELCAuLi50b2tlbkFkZHJzKTtcbiAgfTtcblxuICBoYXNOZXR3b3JrID0gKGNoYWluSUQ6IHN0cmluZywgbGNkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdG9yIS5oYXNOZXR3b3JrKHtcbiAgICAgIGNoYWluSUQsXG4gICAgICBsY2QsXG4gICAgfSk7XG4gIH07XG5cbiAgYWRkTmV0d29yayA9IChuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNoYWluSUQ6IHN0cmluZywgbGNkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdG9yIS5hZGROZXR3b3JrKHtcbiAgICAgIG5hbWU6IG5hbWUgPz8gJycsXG4gICAgICBjaGFpbklELFxuICAgICAgbGNkLFxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjbGllbnQuc3RhdGVzKClcbiAgICogICAgICAgLnN1YnNjcmliZShzdGF0ZXMgPT4ge1xuICAgKiAgICAgICAgIGlmICghc3RhdGVzKSB7XG4gICAqICAgICAgICAgICBjb25zb2xlLmxvZygnY2xpZW50IGlzIHN0aWxsIG5vdCByZWFkeScpXG4gICAqICAgICAgICAgfSBlbHNlIHtcbiAgICogICAgICAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50IG5ldHdvcmsgaXMnLCBzdGF0ZXMubmV0d29yaylcbiAgICogICAgICAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50IHdhbGxldHMgYXJlJywgc3RhdGVzLndhbGxldHMpXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9KVxuICAgKi9cbiAgc3RhdGVzID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZXMuYXNPYnNlcnZhYmxlKCk7XG4gIH07XG5cbiAgZ2V0TGFzdFN0YXRlcyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVzLmdldFZhbHVlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgdGhpcyBjbGllbnRcbiAgICpcbiAgICogLSBVbnN1YnNjcmliZSBhbGwgUnhKcyBTdWJqZWN0cyAoZXZlcnkgT2JzZXJ2YWJsZXMgYXJlIHN0b3BlZClcbiAgICovXG4gIGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgdGhpcy5fY29ubmVjdG9yPy5jbG9zZSgpO1xuICAgIHRoaXMuX2Nvbm5lY3RvciA9IG51bGw7XG4gIH07XG59XG4iXX0=