import { WebConnectorStates, WebConnectorStatus, WebConnectorTxResult } from '@terra-dev/web-connector-interface';
import { CreateTxOptions } from '@terra-money/terra.js';
import { Observable } from 'rxjs';
export declare class WebConnectorController {
    private hostWindow;
    private readonly _status;
    private readonly _states;
    private _connector;
    constructor(hostWindow: Window);
    /**
     * Refetch the clientsStates
     *
     * You don't need call this method in most cases.
     * Normally, when the clientStates is changed, states() get the new clientStates.
     *
     * @example
     * client.states()
     *       .subscribe(states => {
     *         // 2. will get new clientStates
     *         console.log('Got new states', Date.now())
     *       })
     *
     * function callback() {
     *   // 1. refetch client states
     *   client.refetchStates()
     * }
     */
    refetchStates: () => void;
    /**
     * Request approval connection to the Extension. (Connect)
     */
    requestApproval: () => void;
    status: () => Observable<WebConnectorStatus>;
    getLastStatus: () => WebConnectorStatus;
    /**
     * Execute transaction
     *
     * @example
     * client.post(terraAddress, tx: CreateTxOptions)
     *       .subscribe({
     *          next: (result: WebConnectorTxProgress | WebConnectorTxSucceed) => {
     *            switch (result.status) {
     *              case WebConnectorTxStatus.PROGRESS:
     *                console.log('in progress', result.payload)
     *                break;
     *              case WebConnectorTxStatus.SUCCEED:
     *                console.log('succeed', result.payload)
     *                break;
     *            }
     *          },
     *          error: (error) => {
     *            if (error instanceof WebConnectorUserDenied) {
     *              console.log('user denied')
     *            } else if (error instanceof WebConnectorCreateTxFailed) {
     *              console.log('create tx failed', error.message)
     *            } else if (error instanceof WebConnectorTxFailed) {
     *              console.log('tx failed', error.txhash, error.message, error.raw_message)
     *            } else {
     *              console.log('unspecified error', 'message' in error ? error.message : String(error))
     *            }
     *          }
     *       })
     *
     * @description The stream will be
     * TxProgress -> [...TxProgress] -> TxSucceed
     *
     * - Tx is Succeed : TxProgress -> [...TxProgress] -> TxSucceed
     */
    post: (terraAddress: string, tx: CreateTxOptions) => Observable<WebConnectorTxResult>;
    hasCW20Tokens: (chainID: string, ...tokenAddrs: string[]) => Promise<{
        [tokenAddr: string]: boolean;
    }>;
    /**
     * Add CW20 Token to extension dashboard
     */
    addCW20Tokens: (chainID: string, ...tokenAddrs: string[]) => Promise<{
        [tokenAddr: string]: boolean;
    }>;
    hasNetwork: (chainID: string, lcd: string) => Promise<boolean>;
    addNetwork: (name: string | undefined, chainID: string, lcd: string) => Promise<boolean>;
    /**
     * @example
     * client.states()
     *       .subscribe(states => {
     *         if (!states) {
     *           console.log('client is still not ready')
     *         } else {
     *           console.log('current network is', states.network)
     *           console.log('current wallets are', states.wallets)
     *         }
     *       })
     */
    states: () => Observable<WebConnectorStates | null>;
    getLastStates: () => WebConnectorStates | null;
    /**
     * Destroy this client
     *
     * - Unsubscribe all RxJs Subjects (every Observables are stoped)
     */
    destroy: () => void;
}
