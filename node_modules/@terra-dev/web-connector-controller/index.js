import { WebConnectorStatusType, } from '@terra-dev/web-connector-interface';
import bowser from 'bowser';
import { BehaviorSubject } from 'rxjs';
async function getConnector(hostWindow) {
    return new Promise((resolve) => {
        let count = 20;
        function task() {
            if (--count > 0) {
                if (typeof hostWindow.terraWebConnectors !== 'undefined' &&
                    Array.isArray(hostWindow.terraWebConnectors) &&
                    hostWindow.terraWebConnectors.length > 0) {
                    console.log(`TerraWebConnector: `, JSON.stringify(hostWindow.terraWebConnectors[0].getInfo()));
                    resolve(hostWindow.terraWebConnectors[0]);
                }
                else {
                    console.warn(`Can't find window.terraWebConnectors. wait 500ms...`);
                    setTimeout(task, 500);
                }
            }
            else {
                resolve(undefined);
            }
        }
        task();
    });
}
export class WebConnectorController {
    constructor(hostWindow) {
        this.hostWindow = hostWindow;
        this._connector = null;
        /**
         * Refetch the clientsStates
         *
         * You don't need call this method in most cases.
         * Normally, when the clientStates is changed, states() get the new clientStates.
         *
         * @example
         * client.states()
         *       .subscribe(states => {
         *         // 2. will get new clientStates
         *         console.log('Got new states', Date.now())
         *       })
         *
         * function callback() {
         *   // 1. refetch client states
         *   client.refetchStates()
         * }
         */
        this.refetchStates = () => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.refetchStates();
        };
        /**
         * Request approval connection to the Extension. (Connect)
         */
        this.requestApproval = () => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.requestApproval();
        };
        this.status = () => {
            return this._status.asObservable();
        };
        this.getLastStatus = () => {
            return this._status.getValue();
        };
        /**
         * Execute transaction
         *
         * @example
         * client.post(terraAddress, tx: CreateTxOptions)
         *       .subscribe({
         *          next: (result: WebConnectorTxProgress | WebConnectorTxSucceed) => {
         *            switch (result.status) {
         *              case WebConnectorTxStatus.PROGRESS:
         *                console.log('in progress', result.payload)
         *                break;
         *              case WebConnectorTxStatus.SUCCEED:
         *                console.log('succeed', result.payload)
         *                break;
         *            }
         *          },
         *          error: (error) => {
         *            if (error instanceof WebConnectorUserDenied) {
         *              console.log('user denied')
         *            } else if (error instanceof WebConnectorCreateTxFailed) {
         *              console.log('create tx failed', error.message)
         *            } else if (error instanceof WebConnectorTxFailed) {
         *              console.log('tx failed', error.txhash, error.message, error.raw_message)
         *            } else {
         *              console.log('unspecified error', 'message' in error ? error.message : String(error))
         *            }
         *          }
         *       })
         *
         * @description The stream will be
         * TxProgress -> [...TxProgress] -> TxSucceed
         *
         * - Tx is Succeed : TxProgress -> [...TxProgress] -> TxSucceed
         */
        this.post = (terraAddress, tx) => {
            return this._connector.post(terraAddress, tx);
        };
        this.hasCW20Tokens = (chainID, ...tokenAddrs) => {
            return this._connector.hasCW20Tokens(chainID, ...tokenAddrs);
        };
        /**
         * Add CW20 Token to extension dashboard
         */
        this.addCW20Tokens = (chainID, ...tokenAddrs) => {
            return this._connector.addCW20Tokens(chainID, ...tokenAddrs);
        };
        this.hasNetwork = (chainID, lcd) => {
            return this._connector.hasNetwork({
                chainID,
                lcd,
            });
        };
        this.addNetwork = (name, chainID, lcd) => {
            return this._connector.addNetwork({
                name: name !== null && name !== void 0 ? name : '',
                chainID,
                lcd,
            });
        };
        /**
         * @example
         * client.states()
         *       .subscribe(states => {
         *         if (!states) {
         *           console.log('client is still not ready')
         *         } else {
         *           console.log('current network is', states.network)
         *           console.log('current wallets are', states.wallets)
         *         }
         *       })
         */
        this.states = () => {
            return this._states.asObservable();
        };
        this.getLastStates = () => {
            return this._states.getValue();
        };
        /**
         * Destroy this client
         *
         * - Unsubscribe all RxJs Subjects (every Observables are stoped)
         */
        this.destroy = () => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
            this._connector = null;
        };
        this._status = new BehaviorSubject({
            type: WebConnectorStatusType.INITIALIZING,
        });
        this._states = new BehaviorSubject(null);
        const browser = bowser.getParser(navigator.userAgent);
        //@ts-ignore
        getConnector(hostWindow).then((connector) => {
            if (!connector) {
                const name = browser.getBrowserName(true);
                let installLink;
                switch (name) {
                    case 'chrome':
                    case 'microsoft edge':
                        installLink = 'https://google.com/chrome';
                        break;
                    case 'firefox':
                        installLink = 'https://google.com/firefox';
                        break;
                    case 'safari':
                        installLink = 'https://google.com/safari';
                        break;
                    default:
                        installLink = 'https://google.com/chrome';
                        break;
                }
                this._status.next({
                    type: WebConnectorStatusType.NO_AVAILABLE,
                    isConnectorExists: false,
                    installLink,
                });
                return;
            }
            if (!connector.checkBrowserAvailability(navigator.userAgent)) {
                this._status.next({
                    type: WebConnectorStatusType.NO_AVAILABLE,
                    isConnectorExists: true,
                    isSupportBrowser: false,
                });
                return;
            }
            connector.open(hostWindow, this._status, this._states);
            this._connector = connector;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,