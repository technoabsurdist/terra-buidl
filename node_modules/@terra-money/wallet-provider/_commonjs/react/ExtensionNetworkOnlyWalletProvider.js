"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionNetworkOnlyWalletProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_wallet_1 = require("@terra-dev/use-wallet");
const react_1 = require("react");
const chrome_extension_1 = require("../modules/chrome-extension");
function ExtensionNetworkOnlyWalletProvider({ children, defaultNetwork, }) {
    const [controller] = (0, react_1.useState)(() => new chrome_extension_1.ChromeExtensionController({
        defaultNetwork,
        enableWalletConnection: false,
        dangerously__chromeExtensionCompatibleBrowserCheck: () => false,
    }));
    const [network, setNetwork] = (0, react_1.useState)(defaultNetwork);
    (0, react_1.useEffect)(() => {
        const networkSubscription = controller.networkInfo().subscribe({
            next: (value) => {
                setNetwork(value);
            },
        });
        return () => {
            networkSubscription.unsubscribe();
        };
    }, [controller]);
    const state = (0, react_1.useMemo)(() => {
        return {
            availableConnectTypes: [],
            availableInstallTypes: [],
            availableConnections: [],
            status: use_wallet_1.WalletStatus.WALLET_NOT_CONNECTED,
            network,
            wallets: [],
            install: () => {
                throw new Error('not implemented!');
            },
            connect: () => {
                throw new Error('not implemented!');
            },
            connectReadonly: () => {
                throw new Error('not implemented!');
            },
            disconnect: () => {
                throw new Error('not implemented!');
            },
            post: () => {
                throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support post()`);
            },
            sign: () => {
                throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support sign()`);
            },
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: () => {
                throw new Error('not implemented!');
            },
        };
    }, [controller.recheckStatus, network]);
    return ((0, jsx_runtime_1.jsx)(use_wallet_1.WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
exports.ExtensionNetworkOnlyWalletProvider = ExtensionNetworkOnlyWalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LXByb3ZpZGVyL3JlYWN0L0V4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzREFBNEU7QUFFNUUsaUNBQXVFO0FBQ3ZFLGtFQUF3RTtBQU94RSxTQUFnQixrQ0FBa0MsQ0FBQyxFQUNqRCxRQUFRLEVBQ1IsY0FBYyxHQUMwQjtJQUN4QyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUMzQixHQUFHLEVBQUUsQ0FDSCxJQUFJLDRDQUF5QixDQUFDO1FBQzVCLGNBQWM7UUFDZCxzQkFBc0IsRUFBRSxLQUFLO1FBQzdCLGtEQUFrRCxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUs7S0FDaEUsQ0FBQyxDQUNMLENBQUM7SUFFRixNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBYyxjQUFjLENBQUMsQ0FBQztJQUVwRSxJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQzdELElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNkLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQixDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLEVBQUU7WUFDVixtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUM7SUFDSixDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRWpCLE1BQU0sS0FBSyxHQUFHLElBQUEsZUFBTyxFQUFTLEdBQUcsRUFBRTtRQUNqQyxPQUFPO1lBQ0wscUJBQXFCLEVBQUUsRUFBRTtZQUN6QixxQkFBcUIsRUFBRSxFQUFFO1lBQ3pCLG9CQUFvQixFQUFFLEVBQUU7WUFDeEIsTUFBTSxFQUFFLHlCQUFZLENBQUMsb0JBQW9CO1lBQ3pDLE9BQU87WUFDUCxPQUFPLEVBQUUsRUFBRTtZQUNYLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsZUFBZSxFQUFFLEdBQUcsRUFBRTtnQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxVQUFVLEVBQUUsR0FBRyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxNQUFNLElBQUksS0FBSyxDQUNiLDhEQUE4RCxDQUMvRCxDQUFDO1lBQ0osQ0FBQztZQUNELElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsTUFBTSxJQUFJLEtBQUssQ0FDYiw4REFBOEQsQ0FDL0QsQ0FBQztZQUNKLENBQUM7WUFDRCxhQUFhLEVBQUUsVUFBVSxDQUFDLGFBQWE7WUFDdkMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO2dCQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFeEMsT0FBTyxDQUNMLHVCQUFDLDBCQUFhLENBQUMsUUFBUSxrQkFBQyxLQUFLLEVBQUUsS0FBSyxnQkFBRyxRQUFRLFlBQTBCLENBQzFFLENBQUM7QUFDSixDQUFDO0FBbkVELGdGQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdhbGxldCwgV2FsbGV0Q29udGV4dCwgV2FsbGV0U3RhdHVzIH0gZnJvbSAnQHRlcnJhLWRldi91c2Utd2FsbGV0JztcbmltcG9ydCB7IE5ldHdvcmtJbmZvIH0gZnJvbSAnQHRlcnJhLWRldi93YWxsZXQtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENocm9tZUV4dGVuc2lvbkNvbnRyb2xsZXIgfSBmcm9tICcuLi9tb2R1bGVzL2Nocm9tZS1leHRlbnNpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXJQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIGRlZmF1bHROZXR3b3JrOiBOZXR3b3JrSW5mbztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEV4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXIoe1xuICBjaGlsZHJlbixcbiAgZGVmYXVsdE5ldHdvcmssXG59OiBFeHRlbnNpb25OZXR3b3JrT25seVdhbGxldFByb3ZpZGVyUHJvcHMpIHtcbiAgY29uc3QgW2NvbnRyb2xsZXJdID0gdXNlU3RhdGU8Q2hyb21lRXh0ZW5zaW9uQ29udHJvbGxlcj4oXG4gICAgKCkgPT5cbiAgICAgIG5ldyBDaHJvbWVFeHRlbnNpb25Db250cm9sbGVyKHtcbiAgICAgICAgZGVmYXVsdE5ldHdvcmssXG4gICAgICAgIGVuYWJsZVdhbGxldENvbm5lY3Rpb246IGZhbHNlLFxuICAgICAgICBkYW5nZXJvdXNseV9fY2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXJDaGVjazogKCkgPT4gZmFsc2UsXG4gICAgICB9KSxcbiAgKTtcblxuICBjb25zdCBbbmV0d29yaywgc2V0TmV0d29ya10gPSB1c2VTdGF0ZTxOZXR3b3JrSW5mbz4oZGVmYXVsdE5ldHdvcmspO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbmV0d29ya1N1YnNjcmlwdGlvbiA9IGNvbnRyb2xsZXIubmV0d29ya0luZm8oKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgIHNldE5ldHdvcmsodmFsdWUpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBuZXR3b3JrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2NvbnRyb2xsZXJdKTtcblxuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW88V2FsbGV0PigoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlczogW10sXG4gICAgICBhdmFpbGFibGVJbnN0YWxsVHlwZXM6IFtdLFxuICAgICAgYXZhaWxhYmxlQ29ubmVjdGlvbnM6IFtdLFxuICAgICAgc3RhdHVzOiBXYWxsZXRTdGF0dXMuV0FMTEVUX05PVF9DT05ORUNURUQsXG4gICAgICBuZXR3b3JrLFxuICAgICAgd2FsbGV0czogW10sXG4gICAgICBpbnN0YWxsOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGNvbm5lY3Q6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgY29ubmVjdFJlYWRvbmx5OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGRpc2Nvbm5lY3Q6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgcG9zdDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYDxFeHRlbnNpb25OZXR3b3JrT25seVdhbGxldFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IHBvc3QoKWAsXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgc2lnbjogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYDxFeHRlbnNpb25OZXR3b3JrT25seVdhbGxldFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IHNpZ24oKWAsXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgcmVjaGVja1N0YXR1czogY29udHJvbGxlci5yZWNoZWNrU3RhdHVzLFxuICAgICAgaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcjogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSwgW2NvbnRyb2xsZXIucmVjaGVja1N0YXR1cywgbmV0d29ya10pO1xuXG4gIHJldHVybiAoXG4gICAgPFdhbGxldENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT57Y2hpbGRyZW59PC9XYWxsZXRDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIl19