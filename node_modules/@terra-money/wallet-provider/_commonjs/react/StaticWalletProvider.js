"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticWalletProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_wallet_1 = require("@terra-dev/use-wallet");
const react_1 = require("react");
function StaticWalletProvider({ children, defaultNetwork, status = use_wallet_1.WalletStatus.INITIALIZING, availableConnectTypes = [], availableInstallTypes = [], availableConnections = [], wallets = [], }) {
    const state = (0, react_1.useMemo)(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            availableConnections,
            status,
            network: defaultNetwork,
            wallets,
            install: () => {
                throw new Error('not implemented!');
            },
            connect: () => {
                throw new Error('not implemented!');
            },
            connectReadonly: () => {
                throw new Error('not implemented!');
            },
            disconnect: () => {
                throw new Error('not implemented!');
            },
            post: () => {
                throw new Error('not implemented!');
            },
            sign: () => {
                throw new Error('not implemented!');
            },
            recheckStatus: () => {
                throw new Error('not implemented!');
            },
            isChromeExtensionCompatibleBrowser: () => {
                throw new Error('not implemented!');
            },
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        availableConnections,
        defaultNetwork,
        status,
        wallets,
    ]);
    return ((0, jsx_runtime_1.jsx)(use_wallet_1.WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
exports.StaticWalletProvider = StaticWalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGljV2FsbGV0UHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dhbGxldC1wcm92aWRlci9yZWFjdC9TdGF0aWNXYWxsZXRQcm92aWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNEQU8rQjtBQUUvQixpQ0FBa0Q7QUFZbEQsU0FBZ0Isb0JBQW9CLENBQUMsRUFDbkMsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEdBQUcseUJBQVksQ0FBQyxZQUFZLEVBQ2xDLHFCQUFxQixHQUFHLEVBQUUsRUFDMUIscUJBQXFCLEdBQUcsRUFBRSxFQUMxQixvQkFBb0IsR0FBRyxFQUFFLEVBQ3pCLE9BQU8sR0FBRyxFQUFFLEdBQ2M7SUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBQSxlQUFPLEVBQVMsR0FBRyxFQUFFO1FBQ2pDLE9BQU87WUFDTCxxQkFBcUI7WUFDckIscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUNwQixNQUFNO1lBQ04sT0FBTyxFQUFFLGNBQWM7WUFDdkIsT0FBTztZQUNQLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsZUFBZSxFQUFFLEdBQUcsRUFBRTtnQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxVQUFVLEVBQUUsR0FBRyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxhQUFhLEVBQUUsR0FBRyxFQUFFO2dCQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQyxFQUFFO1FBQ0QscUJBQXFCO1FBQ3JCLHFCQUFxQjtRQUNyQixvQkFBb0I7UUFDcEIsY0FBYztRQUNkLE1BQU07UUFDTixPQUFPO0tBQ1IsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUNMLHVCQUFDLDBCQUFhLENBQUMsUUFBUSxrQkFBQyxLQUFLLEVBQUUsS0FBSyxnQkFBRyxRQUFRLFlBQTBCLENBQzFFLENBQUM7QUFDSixDQUFDO0FBdERELG9EQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbm5lY3Rpb24sXG4gIENvbm5lY3RUeXBlLFxuICBXYWxsZXQsXG4gIFdhbGxldENvbnRleHQsXG4gIFdhbGxldEluZm8sXG4gIFdhbGxldFN0YXR1cyxcbn0gZnJvbSAnQHRlcnJhLWRldi91c2Utd2FsbGV0JztcbmltcG9ydCB7IE5ldHdvcmtJbmZvIH0gZnJvbSAnQHRlcnJhLWRldi93YWxsZXQtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNXYWxsZXRQcm92aWRlclByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgZGVmYXVsdE5ldHdvcms6IE5ldHdvcmtJbmZvO1xuICBzdGF0dXM/OiBXYWxsZXRTdGF0dXM7XG4gIGF2YWlsYWJsZUNvbm5lY3RUeXBlcz86IENvbm5lY3RUeXBlW107XG4gIGF2YWlsYWJsZUluc3RhbGxUeXBlcz86IENvbm5lY3RUeXBlW107XG4gIGF2YWlsYWJsZUNvbm5lY3Rpb25zPzogQ29ubmVjdGlvbltdO1xuICB3YWxsZXRzPzogV2FsbGV0SW5mb1tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3RhdGljV2FsbGV0UHJvdmlkZXIoe1xuICBjaGlsZHJlbixcbiAgZGVmYXVsdE5ldHdvcmssXG4gIHN0YXR1cyA9IFdhbGxldFN0YXR1cy5JTklUSUFMSVpJTkcsXG4gIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyA9IFtdLFxuICBhdmFpbGFibGVJbnN0YWxsVHlwZXMgPSBbXSxcbiAgYXZhaWxhYmxlQ29ubmVjdGlvbnMgPSBbXSxcbiAgd2FsbGV0cyA9IFtdLFxufTogU3RhdGljV2FsbGV0UHJvdmlkZXJQcm9wcykge1xuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW88V2FsbGV0PigoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3Rpb25zLFxuICAgICAgc3RhdHVzLFxuICAgICAgbmV0d29yazogZGVmYXVsdE5ldHdvcmssXG4gICAgICB3YWxsZXRzLFxuICAgICAgaW5zdGFsbDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBjb25uZWN0OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGNvbm5lY3RSZWFkb25seTogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBkaXNjb25uZWN0OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgc2lnbjogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICByZWNoZWNrU3RhdHVzOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXI6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgIH07XG4gIH0sIFtcbiAgICBhdmFpbGFibGVDb25uZWN0VHlwZXMsXG4gICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzLFxuICAgIGF2YWlsYWJsZUNvbm5lY3Rpb25zLFxuICAgIGRlZmF1bHROZXR3b3JrLFxuICAgIHN0YXR1cyxcbiAgICB3YWxsZXRzLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxXYWxsZXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+e2NoaWxkcmVufTwvV2FsbGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cbiJdfQ==