"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_wallet_1 = require("@terra-dev/use-wallet");
const react_1 = require("react");
const controller_1 = require("../controller");
const EMPTY_ARRAY = [];
function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, selectChromeExtension, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, }) {
    const [controller] = (0, react_1.useState)(() => new controller_1.WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        selectChromeExtension,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = (0, react_1.useState)(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = (0, react_1.useState)(() => []);
    const [availableConnections, setAvailableConnections] = (0, react_1.useState)(() => []);
    const [states, setStates] = (0, react_1.useState)(() => ({
        status: use_wallet_1.WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    (0, react_1.useEffect)(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const availableConnectionsSubscription = controller
            .availableConnections()
            .subscribe({
            next: (value) => {
                setAvailableConnections(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            availableConnectionsSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = (0, react_1.useMemo)(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            availableConnections,
            status: states.status,
            network: states.network,
            wallets: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            post: controller.post,
            sign: controller.sign,
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        availableConnections,
        controller.connect,
        controller.connectReadonly,
        controller.disconnect,
        controller.install,
        controller.post,
        controller.sign,
        controller.recheckStatus,
        controller.isChromeExtensionCompatibleBrowser,
        states,
    ]);
    return ((0, jsx_runtime_1.jsx)(use_wallet_1.WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
exports.WalletProvider = WalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGV0UHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dhbGxldC1wcm92aWRlci9yZWFjdC9XYWxsZXRQcm92aWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNEQVErQjtBQUMvQixpQ0FBdUU7QUFDdkUsOENBQTBFO0FBTTFFLE1BQU0sV0FBVyxHQUFpQixFQUFFLENBQUM7QUFFckMsU0FBZ0IsY0FBYyxDQUFDLEVBQzdCLFFBQVEsRUFDUixjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYixjQUFjLEVBQ2QsMkJBQTJCLEVBQzNCLHFCQUFxQixFQUNyQixrQ0FBa0MsRUFDbEMsa0RBQWtELEdBQzlCO0lBQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQzNCLEdBQUcsRUFBRSxDQUNILElBQUksNkJBQWdCLENBQUM7UUFDbkIsY0FBYztRQUNkLHFCQUFxQjtRQUNyQixhQUFhO1FBQ2IsY0FBYztRQUNkLDJCQUEyQjtRQUMzQixxQkFBcUI7UUFDckIsa0NBQWtDO1FBQ2xDLGtEQUFrRDtLQUNuRCxDQUFDLENBQ0wsQ0FBQztJQUVGLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSx3QkFBd0IsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFFaEUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFWixNQUFNLENBQUMscUJBQXFCLEVBQUUsd0JBQXdCLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBRWhFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRVosTUFBTSxDQUFDLG9CQUFvQixFQUFFLHVCQUF1QixDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUU5RCxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVaLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFlLEdB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RSxDQUFDO0FBQ0osQ0FBQztBQXhIRCx3Q0F3SEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb25uZWN0aW9uLFxuICBDb25uZWN0VHlwZSxcbiAgV2FsbGV0LFxuICBXYWxsZXRDb250ZXh0LFxuICBXYWxsZXRJbmZvLFxuICBXYWxsZXRTdGF0ZXMsXG4gIFdhbGxldFN0YXR1cyxcbn0gZnJvbSAnQHRlcnJhLWRldi91c2Utd2FsbGV0JztcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBXYWxsZXRDb250cm9sbGVyLCBXYWxsZXRDb250cm9sbGVyT3B0aW9ucyB9IGZyb20gJy4uL2NvbnRyb2xsZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdhbGxldFByb3ZpZGVyUHJvcHMgZXh0ZW5kcyBXYWxsZXRDb250cm9sbGVyT3B0aW9ucyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59XG5cbmNvbnN0IEVNUFRZX0FSUkFZOiBXYWxsZXRJbmZvW10gPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFdhbGxldFByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIGRlZmF1bHROZXR3b3JrLFxuICB3YWxsZXRDb25uZWN0Q2hhaW5JZHMsXG4gIGNvbm5lY3Rvck9wdHMsXG4gIHB1c2hTZXJ2ZXJPcHRzLFxuICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24sXG4gIHNlbGVjdENocm9tZUV4dGVuc2lvbixcbiAgd2FpdGluZ0Nocm9tZUV4dGVuc2lvbkluc3RhbGxDaGVjayxcbiAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2ssXG59OiBXYWxsZXRQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFtjb250cm9sbGVyXSA9IHVzZVN0YXRlPFdhbGxldENvbnRyb2xsZXI+KFxuICAgICgpID0+XG4gICAgICBuZXcgV2FsbGV0Q29udHJvbGxlcih7XG4gICAgICAgIGRlZmF1bHROZXR3b3JrLFxuICAgICAgICB3YWxsZXRDb25uZWN0Q2hhaW5JZHMsXG4gICAgICAgIGNvbm5lY3Rvck9wdHMsXG4gICAgICAgIHB1c2hTZXJ2ZXJPcHRzLFxuICAgICAgICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24sXG4gICAgICAgIHNlbGVjdENocm9tZUV4dGVuc2lvbixcbiAgICAgICAgd2FpdGluZ0Nocm9tZUV4dGVuc2lvbkluc3RhbGxDaGVjayxcbiAgICAgICAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2ssXG4gICAgICB9KSxcbiAgKTtcblxuICBjb25zdCBbYXZhaWxhYmxlQ29ubmVjdFR5cGVzLCBzZXRBdmFpbGFibGVDb25uZWN0VHlwZXNdID0gdXNlU3RhdGU8XG4gICAgQ29ubmVjdFR5cGVbXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbYXZhaWxhYmxlSW5zdGFsbFR5cGVzLCBzZXRBdmFpbGFibGVJbnN0YWxsVHlwZXNdID0gdXNlU3RhdGU8XG4gICAgQ29ubmVjdFR5cGVbXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbYXZhaWxhYmxlQ29ubmVjdGlvbnMsIHNldEF2YWlsYWJsZUNvbm5lY3Rpb25zXSA9IHVzZVN0YXRlPFxuICAgIENvbm5lY3Rpb25bXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbc3RhdGVzLCBzZXRTdGF0ZXNdID0gdXNlU3RhdGU8V2FsbGV0U3RhdGVzPigoKSA9PiAoe1xuICAgIHN0YXR1czogV2FsbGV0U3RhdHVzLklOSVRJQUxJWklORyxcbiAgICBuZXR3b3JrOiBkZWZhdWx0TmV0d29yayxcbiAgfSkpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgYXZhaWxhYmxlQ29ubmVjdFR5cGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlclxuICAgICAgLmF2YWlsYWJsZUNvbm5lY3RUeXBlcygpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2V0QXZhaWxhYmxlQ29ubmVjdFR5cGVzKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlSW5zdGFsbFR5cGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlclxuICAgICAgLmF2YWlsYWJsZUluc3RhbGxUeXBlcygpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2V0QXZhaWxhYmxlSW5zdGFsbFR5cGVzKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlQ29ubmVjdGlvbnNTdWJzY3JpcHRpb24gPSBjb250cm9sbGVyXG4gICAgICAuYXZhaWxhYmxlQ29ubmVjdGlvbnMoKVxuICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHNldEF2YWlsYWJsZUNvbm5lY3Rpb25zKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhdGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlci5zdGF0ZXMoKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgIHNldFN0YXRlcyh2YWx1ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICBhdmFpbGFibGVDb25uZWN0aW9uc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgc3RhdGVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2NvbnRyb2xsZXJdKTtcblxuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW88V2FsbGV0PigoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3Rpb25zLFxuICAgICAgc3RhdHVzOiBzdGF0ZXMuc3RhdHVzLFxuICAgICAgbmV0d29yazogc3RhdGVzLm5ldHdvcmssXG4gICAgICB3YWxsZXRzOlxuICAgICAgICBzdGF0ZXMuc3RhdHVzID09PSBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRFxuICAgICAgICAgID8gc3RhdGVzLndhbGxldHNcbiAgICAgICAgICA6IEVNUFRZX0FSUkFZLFxuICAgICAgaW5zdGFsbDogY29udHJvbGxlci5pbnN0YWxsLFxuICAgICAgY29ubmVjdDogY29udHJvbGxlci5jb25uZWN0LFxuICAgICAgY29ubmVjdFJlYWRvbmx5OiBjb250cm9sbGVyLmNvbm5lY3RSZWFkb25seSxcbiAgICAgIGRpc2Nvbm5lY3Q6IGNvbnRyb2xsZXIuZGlzY29ubmVjdCxcbiAgICAgIHBvc3Q6IGNvbnRyb2xsZXIucG9zdCxcbiAgICAgIHNpZ246IGNvbnRyb2xsZXIuc2lnbixcbiAgICAgIHJlY2hlY2tTdGF0dXM6IGNvbnRyb2xsZXIucmVjaGVja1N0YXR1cyxcbiAgICAgIGlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXI6XG4gICAgICAgIGNvbnRyb2xsZXIuaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcixcbiAgICB9O1xuICB9LCBbXG4gICAgYXZhaWxhYmxlQ29ubmVjdFR5cGVzLFxuICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlcyxcbiAgICBhdmFpbGFibGVDb25uZWN0aW9ucyxcbiAgICBjb250cm9sbGVyLmNvbm5lY3QsXG4gICAgY29udHJvbGxlci5jb25uZWN0UmVhZG9ubHksXG4gICAgY29udHJvbGxlci5kaXNjb25uZWN0LFxuICAgIGNvbnRyb2xsZXIuaW5zdGFsbCxcbiAgICBjb250cm9sbGVyLnBvc3QsXG4gICAgY29udHJvbGxlci5zaWduLFxuICAgIGNvbnRyb2xsZXIucmVjaGVja1N0YXR1cyxcbiAgICBjb250cm9sbGVyLmlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXIsXG4gICAgc3RhdGVzLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxXYWxsZXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+e2NoaWxkcmVufTwvV2FsbGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cbiJdfQ==