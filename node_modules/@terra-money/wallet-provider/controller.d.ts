import { ChromeExtensionInfo } from '@terra-dev/chrome-extension';
import { Connection, ConnectType, TxResult, WalletInfo, WalletStates, WalletStatus } from '@terra-dev/use-wallet';
import { NetworkInfo, SignResult } from '@terra-dev/wallet-types';
import { CreateTxOptions } from '@terra-money/terra.js';
import { Observable } from 'rxjs';
import { ReadonlyWalletSession } from './modules/readonly-wallet';
import { WalletConnectControllerOptions } from './modules/walletconnect';
export interface WalletControllerOptions extends WalletConnectControllerOptions {
    /**
     * ⚠️ Don't hardcoding this, use getChain Options()
     *
     * fallback network if controller is not connected
     */
    defaultNetwork: NetworkInfo;
    /**
     * ⚠️ Don't hardcoding this, use getChain Options()
     *
     * for walletconnect
     *
     * The network rules passed by the Terra Station Mobile are 0 is testnet, 1 is mainnet.
     *
     * Always set testnet for 0 and mainnet for 1.
     *
     * @example
     * ```
     * const mainnet: NetworkInfo = {
     *  name: 'mainnet',
     *  chainID: 'columbus-5',
     *  lcd: 'https://lcd.terra.dev',
     * }
     *
     * const testnet: NetworkInfo = {
     *  name: 'testnet',
     *  chainID: 'bombay-12',
     *  lcd: 'https://bombay-lcd.terra.dev',
     * }
     *
     * const walletConnectChainIds: Record<number, NetworkInfo> = {
     *   0: testnet,
     *   1: mainnet,
     * }
     *
     * <WalletProvider walletConnectChainIds={walletConnectChainIds}>
     * ```
     */
    walletConnectChainIds: Record<number, NetworkInfo>;
    /**
     * run at executing the `connect(ConnectType.READONLY)`
     */
    createReadonlyWalletSession?: (networks: NetworkInfo[]) => Promise<ReadonlyWalletSession | null>;
    /**
     * run at executing the `connect(ConnectType.CHROME_EXTENSION)`
     * if user installed multiple wallets
     */
    selectChromeExtension?: (extensionInfos: ChromeExtensionInfo[]) => Promise<ChromeExtensionInfo | null>;
    /**
     * milliseconds to wait checking chrome extension is installed
     *
     * @default 1000 * 3 miliseconds
     */
    waitingChromeExtensionInstallCheck?: number;
    /**
     * ⚠️ This API is an option for wallet developers. Please don't use dApp developers.
     *
     * @example
     * ```
     * <WalletProvider dangerously__chromeExtensionCompatibleBrowserCheck={(userAgent: string) => {
     *   return /MyWallet\//.test(userAgent);
     * }}>
     * ```
     */
    dangerously__chromeExtensionCompatibleBrowserCheck?: (userAgent: string) => boolean;
}
export declare class WalletController {
    readonly options: WalletControllerOptions;
    private chromeExtension;
    private webConnector;
    private walletConnect;
    private readonlyWallet;
    private _availableConnectTypes;
    private _availableInstallTypes;
    private _states;
    private disableReadonlyWallet;
    private disableChromeExtension;
    private disableWebExtension;
    private disableWalletConnect;
    private readonly _notConnected;
    private readonly _initializing;
    constructor(options: WalletControllerOptions);
    /** @see Wallet#isChromeExtensionCompatibleBrowser */
    isChromeExtensionCompatibleBrowser: () => boolean;
    /** @see Wallet#availableConnectTypes */
    availableConnectTypes: () => Observable<ConnectType[]>;
    /** @see Wallet#availableConnections */
    availableConnections: () => Observable<Connection[]>;
    /** @see Wallet#availableInstallTypes */
    availableInstallTypes: () => Observable<ConnectType[]>;
    /**
     * @see Wallet#status
     * @see Wallet#network
     * @see Wallet#wallets
     */
    states: () => Observable<WalletStates>;
    /** @deprecated please use `states()` */
    status: () => Observable<WalletStatus>;
    /** @deprecated please use `states()` */
    network: () => Observable<NetworkInfo>;
    /** @deprecated please use `states()` */
    wallets: () => Observable<WalletInfo[]>;
    /** @see Wallet#recheckStatus */
    recheckStatus: () => void;
    /** @see Wallet#install */
    install: (type: ConnectType) => void;
    /** @see Wallet#connect */
    connect: (type: ConnectType, identifier?: string | undefined) => void;
    /** @see Wallet#connectReadonly */
    connectReadonly: (terraAddress: string, network: NetworkInfo) => void;
    /** @see Wallet#disconnect */
    disconnect: () => void;
    /** @see Wallet#post */
    post: (tx: CreateTxOptions, txTarget?: {
        terraAddress?: string;
    }) => Promise<TxResult>;
    /** @see Wallet#sign */
    sign: (tx: CreateTxOptions, txTarget?: {
        terraAddress?: string;
    }) => Promise<SignResult>;
    private updateStates;
    private enableReadonlyWallet;
    private enableWebExtension;
    private enableChromeExtension;
    private enableWalletConnect;
}
