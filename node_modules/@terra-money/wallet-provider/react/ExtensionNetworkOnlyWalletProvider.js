import { jsx as _jsx } from "react/jsx-runtime";
import { WalletContext, WalletStatus } from '@terra-dev/use-wallet';
import { useEffect, useMemo, useState } from 'react';
import { ChromeExtensionController } from '../modules/chrome-extension';
export function ExtensionNetworkOnlyWalletProvider({ children, defaultNetwork, }) {
    const [controller] = useState(() => new ChromeExtensionController({
        defaultNetwork,
        enableWalletConnection: false,
        dangerously__chromeExtensionCompatibleBrowserCheck: () => false,
    }));
    const [network, setNetwork] = useState(defaultNetwork);
    useEffect(() => {
        const networkSubscription = controller.networkInfo().subscribe({
            next: (value) => {
                setNetwork(value);
            },
        });
        return () => {
            networkSubscription.unsubscribe();
        };
    }, [controller]);
    const state = useMemo(() => {
        return {
            availableConnectTypes: [],
            availableInstallTypes: [],
            availableConnections: [],
            status: WalletStatus.WALLET_NOT_CONNECTED,
            network,
            wallets: [],
            install: () => {
                throw new Error('not implemented!');
            },
            connect: () => {
                throw new Error('not implemented!');
            },
            connectReadonly: () => {
                throw new Error('not implemented!');
            },
            disconnect: () => {
                throw new Error('not implemented!');
            },
            post: () => {
                throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support post()`);
            },
            sign: () => {
                throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support sign()`);
            },
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: () => {
                throw new Error('not implemented!');
            },
        };
    }, [controller.recheckStatus, network]);
    return (_jsx(WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LXByb3ZpZGVyL3JlYWN0L0V4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTVFLE9BQWMsRUFBYSxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN2RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU94RSxNQUFNLFVBQVUsa0NBQWtDLENBQUMsRUFDakQsUUFBUSxFQUNSLGNBQWMsR0FDMEI7SUFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FDM0IsR0FBRyxFQUFFLENBQ0gsSUFBSSx5QkFBeUIsQ0FBQztRQUM1QixjQUFjO1FBQ2Qsc0JBQXNCLEVBQUUsS0FBSztRQUM3QixrREFBa0QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLO0tBQ2hFLENBQUMsQ0FDTCxDQUFDO0lBRUYsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxRQUFRLENBQWMsY0FBYyxDQUFDLENBQUM7SUFFcEUsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUM3RCxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDZCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sR0FBRyxFQUFFO1lBQ1YsbUJBQW1CLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUVqQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQVMsR0FBRyxFQUFFO1FBQ2pDLE9BQU87WUFDTCxxQkFBcUIsRUFBRSxFQUFFO1lBQ3pCLHFCQUFxQixFQUFFLEVBQUU7WUFDekIsb0JBQW9CLEVBQUUsRUFBRTtZQUN4QixNQUFNLEVBQUUsWUFBWSxDQUFDLG9CQUFvQjtZQUN6QyxPQUFPO1lBQ1AsT0FBTyxFQUFFLEVBQUU7WUFDWCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELGVBQWUsRUFBRSxHQUFHLEVBQUU7Z0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsVUFBVSxFQUFFLEdBQUcsRUFBRTtnQkFDZixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsTUFBTSxJQUFJLEtBQUssQ0FDYiw4REFBOEQsQ0FDL0QsQ0FBQztZQUNKLENBQUM7WUFDRCxJQUFJLEVBQUUsR0FBRyxFQUFFO2dCQUNULE1BQU0sSUFBSSxLQUFLLENBQ2IsOERBQThELENBQy9ELENBQUM7WUFDSixDQUFDO1lBQ0QsYUFBYSxFQUFFLFVBQVUsQ0FBQyxhQUFhO1lBQ3ZDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRXhDLE9BQU8sQ0FDTCxLQUFDLGFBQWEsQ0FBQyxRQUFRLGtCQUFDLEtBQUssRUFBRSxLQUFLLGdCQUFHLFFBQVEsWUFBMEIsQ0FDMUUsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXYWxsZXQsIFdhbGxldENvbnRleHQsIFdhbGxldFN0YXR1cyB9IGZyb20gJ0B0ZXJyYS1kZXYvdXNlLXdhbGxldCc7XG5pbXBvcnQgeyBOZXR3b3JrSW5mbyB9IGZyb20gJ0B0ZXJyYS1kZXYvd2FsbGV0LXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaHJvbWVFeHRlbnNpb25Db250cm9sbGVyIH0gZnJvbSAnLi4vbW9kdWxlcy9jaHJvbWUtZXh0ZW5zaW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbnNpb25OZXR3b3JrT25seVdhbGxldFByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBkZWZhdWx0TmV0d29yazogTmV0d29ya0luZm87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFeHRlbnNpb25OZXR3b3JrT25seVdhbGxldFByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIGRlZmF1bHROZXR3b3JrLFxufTogRXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFtjb250cm9sbGVyXSA9IHVzZVN0YXRlPENocm9tZUV4dGVuc2lvbkNvbnRyb2xsZXI+KFxuICAgICgpID0+XG4gICAgICBuZXcgQ2hyb21lRXh0ZW5zaW9uQ29udHJvbGxlcih7XG4gICAgICAgIGRlZmF1bHROZXR3b3JrLFxuICAgICAgICBlbmFibGVXYWxsZXRDb25uZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2s6ICgpID0+IGZhbHNlLFxuICAgICAgfSksXG4gICk7XG5cbiAgY29uc3QgW25ldHdvcmssIHNldE5ldHdvcmtdID0gdXNlU3RhdGU8TmV0d29ya0luZm8+KGRlZmF1bHROZXR3b3JrKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG5ldHdvcmtTdWJzY3JpcHRpb24gPSBjb250cm9sbGVyLm5ldHdvcmtJbmZvKCkuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBzZXROZXR3b3JrKHZhbHVlKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbmV0d29ya1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtjb250cm9sbGVyXSk7XG5cbiAgY29uc3Qgc3RhdGUgPSB1c2VNZW1vPFdhbGxldD4oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBhdmFpbGFibGVDb25uZWN0VHlwZXM6IFtdLFxuICAgICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzOiBbXSxcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3Rpb25zOiBbXSxcbiAgICAgIHN0YXR1czogV2FsbGV0U3RhdHVzLldBTExFVF9OT1RfQ09OTkVDVEVELFxuICAgICAgbmV0d29yayxcbiAgICAgIHdhbGxldHM6IFtdLFxuICAgICAgaW5zdGFsbDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBjb25uZWN0OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGNvbm5lY3RSZWFkb25seTogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBkaXNjb25uZWN0OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGA8RXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBwb3N0KClgLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHNpZ246ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGA8RXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBzaWduKClgLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHJlY2hlY2tTdGF0dXM6IGNvbnRyb2xsZXIucmVjaGVja1N0YXR1cyxcbiAgICAgIGlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXI6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgIH07XG4gIH0sIFtjb250cm9sbGVyLnJlY2hlY2tTdGF0dXMsIG5ldHdvcmtdKTtcblxuICByZXR1cm4gKFxuICAgIDxXYWxsZXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+e2NoaWxkcmVufTwvV2FsbGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cbiJdfQ==