import { jsx as _jsx } from "react/jsx-runtime";
import { WalletContext, WalletStatus, } from '@terra-dev/use-wallet';
import { useEffect, useMemo, useState } from 'react';
import { WalletController } from '../controller';
const EMPTY_ARRAY = [];
export function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, selectChromeExtension, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, }) {
    const [controller] = useState(() => new WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        selectChromeExtension,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = useState(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = useState(() => []);
    const [availableConnections, setAvailableConnections] = useState(() => []);
    const [states, setStates] = useState(() => ({
        status: WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    useEffect(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const availableConnectionsSubscription = controller
            .availableConnections()
            .subscribe({
            next: (value) => {
                setAvailableConnections(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            availableConnectionsSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = useMemo(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            availableConnections,
            status: states.status,
            network: states.network,
            wallets: states.status === WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            post: controller.post,
            sign: controller.sign,
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        availableConnections,
        controller.connect,
        controller.connectReadonly,
        controller.disconnect,
        controller.install,
        controller.post,
        controller.sign,
        controller.recheckStatus,
        controller.isChromeExtensionCompatibleBrowser,
        states,
    ]);
    return (_jsx(WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
//# sourceMappingURL=data:application/json;base64,